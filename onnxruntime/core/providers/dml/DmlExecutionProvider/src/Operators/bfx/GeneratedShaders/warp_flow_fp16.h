#if 0
;
; Note: shader requires additional functionality:
;       Use native low precision
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 1c0a298a8272acef8fe30a4ed0b6abb0
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [28 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;                                       UAV  struct         r/w      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f16 = type { half, half, half, half, i32 }
%"class.RWStructuredBuffer<half>" = type { half }
%Constants = type { i32, i32, i32, i32, i32, i32, i32 }

define void @warp_flow() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %6 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %7 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %8 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %9 = extractvalue %dx.types.CBufRet.i32 %8, 0
  %10 = sdiv i32 %7, %9
  %11 = srem i32 %7, %9
  %12 = extractvalue %dx.types.CBufRet.i32 %8, 2
  %13 = icmp sge i32 %5, %12
  %14 = extractvalue %dx.types.CBufRet.i32 %8, 1
  %15 = icmp sge i32 %6, %14
  %16 = or i1 %13, %15
  %17 = icmp slt i32 %9, 0
  %18 = or i1 %16, %17
  %19 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.i32 %19, 3
  %21 = icmp sge i32 %10, %20
  %22 = or i1 %18, %21
  br i1 %22, label %213, label %23

; <label>:23                                      ; preds = %0
  %24 = shl i32 %10, 1
  %25 = mul nsw i32 %24, %14
  %26 = mul nsw i32 %25, %12
  %27 = mul nsw i32 %12, %14
  %28 = mul nsw i32 %12, %6
  %29 = add i32 %26, %5
  %30 = add i32 %29, %27
  %31 = add i32 %30, %28
  %32 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %2, i32 %31, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.f16 %32, 0
  %34 = fpext half %33 to float
  %35 = add i32 %29, %28
  %36 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %2, i32 %35, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %37 = extractvalue %dx.types.ResRet.f16 %36, 0
  %38 = fpext half %37 to float
  %39 = sitofp i32 %6 to float
  %40 = fadd fast float %34, %39
  %41 = sitofp i32 %5 to float
  %42 = fadd fast float %38, %41
  %43 = extractvalue %dx.types.CBufRet.i32 %19, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %58

; <label>:45                                      ; preds = %23
  %46 = sitofp i32 %14 to float
  %47 = fmul fast float %46, %40
  %48 = add nsw i32 %14, -1
  %49 = sitofp i32 %48 to float
  %50 = fdiv fast float %47, %49
  %51 = fadd fast float %50, -5.000000e-01
  %52 = sitofp i32 %12 to float
  %53 = fmul fast float %52, %42
  %54 = add nsw i32 %12, -1
  %55 = sitofp i32 %54 to float
  %56 = fdiv fast float %53, %55
  %57 = fadd fast float %56, -5.000000e-01
  br label %58

; <label>:58                                      ; preds = %45, %23
  %59 = phi float [ %40, %23 ], [ %51, %45 ]
  %60 = phi float [ %42, %23 ], [ %57, %45 ]
  %61 = mul nsw i32 %9, %10
  %62 = add i32 %11, %61
  %63 = mul i32 %14, %62
  %64 = mul i32 %63, %12
  %65 = extractvalue %dx.types.CBufRet.i32 %19, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %147

; <label>:67                                      ; preds = %58
  %68 = fcmp fast ole float %59, -1.000000e+00
  %69 = sitofp i32 %14 to float
  %70 = fcmp fast ole float %69, %59
  %71 = or i1 %68, %70
  %72 = fcmp fast ole float %60, -1.000000e+00
  %73 = or i1 %72, %71
  %74 = sitofp i32 %12 to float
  %75 = fcmp fast ole float %74, %60
  %76 = or i1 %75, %73
  br i1 %76, label %209, label %77

; <label>:77                                      ; preds = %67
  %78 = call float @dx.op.unary.f32(i32 27, float %59)  ; Round_ni(value)
  %79 = fptosi float %78 to i32
  %80 = call float @dx.op.unary.f32(i32 27, float %60)  ; Round_ni(value)
  %81 = fptosi float %80 to i32
  %82 = add nsw i32 %79, 1
  %83 = add nsw i32 %81, 1
  %84 = sitofp i32 %79 to float
  %85 = fsub fast float %59, %84
  %86 = sitofp i32 %81 to float
  %87 = fsub fast float %60, %86
  %88 = fsub fast float 1.000000e+00, %85
  %89 = fsub fast float 1.000000e+00, %87
  %90 = or i32 %81, %79
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %99

; <label>:92                                      ; preds = %77
  %93 = mul nsw i32 %79, %12
  %94 = add i32 %81, %64
  %95 = add i32 %94, %93
  %96 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %95, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %97 = extractvalue %dx.types.ResRet.f16 %96, 0
  %98 = fpext half %97 to float
  br label %99

; <label>:99                                      ; preds = %92, %77
  %100 = phi float [ %98, %92 ], [ 0.000000e+00, %77 ]
  %101 = icmp sgt i32 %79, -1
  %102 = add nsw i32 %12, -1
  %103 = icmp slt i32 %81, %102
  %104 = and i1 %101, %103
  br i1 %104, label %105, label %112

; <label>:105                                     ; preds = %99
  %106 = mul nsw i32 %79, %12
  %107 = add i32 %106, %64
  %108 = add i32 %107, %83
  %109 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %108, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %110 = extractvalue %dx.types.ResRet.f16 %109, 0
  %111 = fpext half %110 to float
  br label %112

; <label>:112                                     ; preds = %105, %99
  %113 = phi float [ %111, %105 ], [ 0.000000e+00, %99 ]
  %114 = add nsw i32 %14, -1
  %115 = icmp slt i32 %79, %114
  %116 = icmp sgt i32 %81, -1
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %125

; <label>:118                                     ; preds = %112
  %119 = mul nsw i32 %82, %12
  %120 = add i32 %81, %64
  %121 = add i32 %120, %119
  %122 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %121, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %123 = extractvalue %dx.types.ResRet.f16 %122, 0
  %124 = fpext half %123 to float
  br label %125

; <label>:125                                     ; preds = %118, %112
  %126 = phi float [ %124, %118 ], [ 0.000000e+00, %112 ]
  %127 = and i1 %115, %103
  br i1 %127, label %128, label %135

; <label>:128                                     ; preds = %125
  %129 = mul nsw i32 %82, %12
  %130 = add i32 %83, %64
  %131 = add i32 %130, %129
  %132 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %131, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %133 = extractvalue %dx.types.ResRet.f16 %132, 0
  %134 = fpext half %133 to float
  br label %135

; <label>:135                                     ; preds = %128, %125
  %136 = phi float [ %134, %128 ], [ 0.000000e+00, %125 ]
  %137 = fmul fast float %100, %89
  %138 = fmul fast float %113, %87
  %139 = fmul fast float %126, %89
  %140 = fmul fast float %136, %87
  %141 = fadd fast float %140, %139
  %142 = fmul fast float %141, %85
  %143 = fadd fast float %138, %137
  %144 = fmul fast float %143, %88
  %145 = fadd fast float %144, %142
  %146 = fptrunc float %145 to half
  br label %209

; <label>:147                                     ; preds = %58
  %148 = call float @dx.op.unary.f32(i32 27, float %59)  ; Round_ni(value)
  %149 = fptosi float %148 to i32
  %150 = call float @dx.op.unary.f32(i32 27, float %60)  ; Round_ni(value)
  %151 = fptosi float %150 to i32
  %152 = add nsw i32 %149, 1
  %153 = add nsw i32 %151, 1
  %154 = sitofp i32 %149 to float
  %155 = fsub fast float %59, %154
  %156 = sitofp i32 %151 to float
  %157 = fsub fast float %60, %156
  %158 = fsub fast float 1.000000e+00, %155
  %159 = fsub fast float 1.000000e+00, %157
  %160 = icmp slt i32 %149, 0
  %161 = select i1 %160, i32 0, i32 %149
  %162 = icmp sge i32 %161, %14
  %163 = add nsw i32 %14, -1
  %164 = select i1 %162, i32 %163, i32 %161
  %165 = icmp slt i32 %151, 0
  %166 = select i1 %165, i32 0, i32 %151
  %167 = icmp sge i32 %166, %12
  %168 = add nsw i32 %12, -1
  %169 = select i1 %167, i32 %168, i32 %166
  %170 = icmp slt i32 %152, 0
  %171 = select i1 %170, i32 0, i32 %152
  %172 = icmp sge i32 %171, %14
  %173 = select i1 %172, i32 %163, i32 %171
  %174 = icmp slt i32 %153, 0
  %175 = select i1 %174, i32 0, i32 %153
  %176 = icmp sge i32 %175, %12
  %177 = select i1 %176, i32 %168, i32 %175
  %178 = mul nsw i32 %164, %12
  %179 = add nsw i32 %178, %64
  %180 = add nsw i32 %179, %169
  %181 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %180, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %182 = extractvalue %dx.types.ResRet.f16 %181, 0
  %183 = fpext half %182 to float
  %184 = add nsw i32 %179, %177
  %185 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %184, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %186 = extractvalue %dx.types.ResRet.f16 %185, 0
  %187 = fpext half %186 to float
  %188 = mul nsw i32 %173, %12
  %189 = add i32 %169, %64
  %190 = add i32 %189, %188
  %191 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %190, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %192 = extractvalue %dx.types.ResRet.f16 %191, 0
  %193 = fpext half %192 to float
  %194 = add nsw i32 %188, %64
  %195 = add nsw i32 %194, %177
  %196 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %195, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %197 = extractvalue %dx.types.ResRet.f16 %196, 0
  %198 = fpext half %197 to float
  %199 = fmul fast float %183, %159
  %200 = fmul fast float %187, %157
  %201 = fmul fast float %193, %159
  %202 = fmul fast float %198, %157
  %203 = fadd fast float %202, %201
  %204 = fmul fast float %203, %155
  %205 = fadd fast float %200, %199
  %206 = fmul fast float %205, %158
  %207 = fadd fast float %206, %204
  %208 = fptrunc float %207 to half
  br label %209

; <label>:209                                     ; preds = %147, %135, %67
  %210 = phi half [ %208, %147 ], [ %146, %135 ], [ 0xH0000, %67 ]
  %211 = add i32 %64, %5
  %212 = add i32 %211, %28
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %1, i32 %212, i32 0, half %210, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %213

; <label>:213                                     ; preds = %209, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.f16(i32, %dx.types.Handle, i32, i32, half, half, half, half, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !9, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!7 = !{i32 1, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!8 = !{i32 2, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!9 = !{!10}
!10 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 28, null}
!11 = !{void ()* @warp_flow, !"warp_flow", null, !4, !12}
!12 = !{i32 0, i64 8388656, i32 4, !13}
!13 = !{i32 16, i32 16, i32 1}

#endif

const unsigned char g_warp_flow[] = {
  0x44, 0x58, 0x42, 0x43, 0x9d, 0x64, 0x97, 0x13, 0x6b, 0x50, 0x34, 0x7e,
  0x2c, 0x48, 0xff, 0xf4, 0x01, 0x3e, 0xc4, 0x80, 0x01, 0x00, 0x00, 0x00,
  0x50, 0x0b, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xa8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x0a, 0x29, 0x8a, 0x82, 0x72, 0xac, 0xef,
  0x8f, 0xe3, 0x0a, 0x4e, 0xd0, 0xb6, 0xab, 0xb0, 0x44, 0x58, 0x49, 0x4c,
  0x14, 0x0a, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0x85, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xfc, 0x09, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x7c, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xa4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x93, 0x22, 0xa4, 0x84, 0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8a, 0x8c, 0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x7c, 0x23, 0x00,
  0x25, 0x00, 0x14, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0x63, 0x0c, 0x22, 0xa3,
  0x00, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad,
  0xc4, 0xe4, 0x17, 0xb5, 0x8e, 0x0a, 0x63, 0x8c, 0x19, 0x73, 0x04, 0x08,
  0xa1, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86,
  0x85, 0x40, 0x41, 0x2a, 0xc7, 0x19, 0x6a, 0x0c, 0x34, 0x68, 0x95, 0x05,
  0x0c, 0x35, 0x86, 0x31, 0xc6, 0xa0, 0x41, 0x6d, 0x06, 0xa0, 0x0c, 0x6f,
  0x3c, 0x82, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46,
  0x15, 0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x8c, 0x31, 0x0a, 0x21,
  0x87, 0x1a, 0x34, 0xe7, 0x08, 0x82, 0x62, 0xa8, 0x81, 0xc6, 0xa8, 0x64,
  0x07, 0x02, 0x66, 0xf2, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1,
  0x0d, 0x64, 0xe1, 0x16, 0x66, 0x81, 0x1e, 0xe4, 0xa1, 0x1e, 0xc6, 0x81,
  0x1e, 0xea, 0x41, 0x1e, 0xca, 0x81, 0x1c, 0x44, 0xa1, 0x1e, 0xcc, 0xc1,
  0x1c, 0xca, 0x41, 0x1e, 0xf8, 0x00, 0x1d, 0xc2, 0x81, 0x1d, 0xcc, 0xc1,
  0x0f, 0x50, 0x60, 0x28, 0x5f, 0xc2, 0x39, 0x8d, 0x34, 0x01, 0xcd, 0x24,
  0xa1, 0x63, 0x8c, 0x31, 0xc6, 0x18, 0xb4, 0xe7, 0x08, 0x40, 0x61, 0x0a,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x67, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x1e, 0x08, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x13, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x2c, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x1a, 0x25, 0x50, 0x04, 0xc5, 0x30, 0x02, 0x50, 0x18,
  0x85, 0x53, 0x08, 0x05, 0x42, 0x75, 0x04, 0x80, 0x7a, 0x81, 0x03, 0x02,
  0x22, 0x10, 0x9f, 0x01, 0x20, 0x3d, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x46, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44,
  0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b,
  0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81,
  0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84,
  0xe1, 0x98, 0x20, 0x0c, 0xc8, 0x06, 0x61, 0x20, 0x26, 0x08, 0x43, 0xb2,
  0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08,
  0x83, 0x32, 0x41, 0xd0, 0x24, 0x02, 0x13, 0x84, 0x61, 0x99, 0x20, 0x54,
  0xcf, 0x86, 0x45, 0x59, 0x18, 0x45, 0x19, 0x1a, 0xc7, 0x71, 0x8a, 0x0d,
  0xcb, 0xb0, 0x30, 0xca, 0x30, 0x34, 0x8e, 0xe3, 0x14, 0x1b, 0x16, 0x62,
  0x61, 0x14, 0x62, 0x68, 0x1c, 0xc7, 0x29, 0x36, 0x0c, 0x0f, 0x14, 0x4d,
  0x10, 0xb8, 0x68, 0x82, 0x30, 0x30, 0x1b, 0x10, 0x65, 0x62, 0x14, 0x65,
  0xa0, 0x80, 0x0d, 0x41, 0xb5, 0x81, 0x00, 0x24, 0x0b, 0x98, 0x20, 0x08,
  0x00, 0x93, 0xbb, 0x30, 0x39, 0xb8, 0x2f, 0x33, 0xb6, 0xb7, 0xbb, 0x09,
  0x42, 0x07, 0x4d, 0x10, 0x86, 0x66, 0x82, 0x30, 0x38, 0x1b, 0x06, 0x8e,
  0x1b, 0x36, 0x10, 0x8a, 0xb6, 0x75, 0x1b, 0x0a, 0x2c, 0x03, 0x2e, 0xaf,
  0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94,
  0x20, 0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6,
  0x36, 0x25, 0x20, 0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95,
  0xc9, 0x4d, 0x09, 0x8c, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64,
  0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x02, 0xa4, 0x0c, 0x19,
  0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94,
  0xc0, 0xaa, 0x43, 0x86, 0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5,
  0x96, 0xe6, 0x46, 0x37, 0x37, 0x25, 0xf0, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc,
  0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4,
  0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x56, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44,
  0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x06,
  0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34,
  0xc3, 0x42, 0x98, 0xc0, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d,
  0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x83, 0x5f, 0xd4, 0xba, 0x0d, 0x60,
  0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x01, 0xd6, 0x46, 0x15, 0x05, 0x11, 0xb1,
  0x93, 0x13, 0x11, 0x7e, 0x51, 0xeb, 0x16, 0x20, 0x0d, 0x97, 0xef, 0x3c,
  0xfe, 0x74, 0x44, 0x04, 0x30, 0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x11, 0x3c,
  0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b,
  0x40, 0x62, 0x01, 0xd1, 0xf3, 0x17, 0x8b, 0x63, 0x01, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x13, 0x04, 0x51, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x34, 0xca, 0x52, 0xa0,
  0x06, 0x4a, 0xae, 0x6c, 0x4a, 0x37, 0xa0, 0xec, 0x0a, 0x53, 0x80, 0x50,
  0x11, 0x94, 0x00, 0x99, 0x11, 0x80, 0x19, 0x00, 0x7a, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xf8, 0x37, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0xff,
  0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x71, 0xcd, 0xa1, 0x69, 0xd3,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x58, 0x9d, 0x83, 0x70, 0x1c, 0x35,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x96, 0xf7, 0x24, 0x9a, 0x56, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xf5, 0x41, 0xcb, 0xb6, 0x59, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x40, 0x94, 0xc1, 0xc3, 0x8d, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x01, 0x61, 0x06, 0x10, 0x18, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0x71, 0x06, 0x11, 0x18, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0x44, 0x06, 0x11, 0x21, 0x06, 0xa3, 0x09, 0x01, 0x50, 0x43,
  0x40, 0x45, 0x08, 0x36, 0x9a, 0x40, 0x08, 0xc3, 0x0d, 0x48, 0x70, 0x06,
  0xa3, 0x09, 0x46, 0x30, 0xdc, 0x90, 0x04, 0x67, 0x50, 0x43, 0xb0, 0xc3,
  0x0d, 0x08, 0x1a, 0xa0, 0x41, 0x09, 0xc1, 0x8e, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0xf4, 0x06, 0xdc, 0xa3, 0x06, 0xa3, 0x09, 0xc1, 0x30, 0xdc,
  0xb0, 0x04, 0x67, 0x50, 0x44, 0xb0, 0xb3, 0x0c, 0x50, 0x10, 0x54, 0x13,
  0x07, 0x67, 0x81, 0x22, 0x02, 0x0b, 0x1a, 0x11, 0x98, 0xc3, 0x88, 0xc0,
  0x9e, 0x4a, 0x04, 0x35, 0x5c, 0x50, 0xc1, 0x00, 0x15, 0x0c, 0x30, 0x62,
  0xa0, 0x00, 0x20, 0x08, 0x06, 0x8b, 0x1f, 0xb4, 0x41, 0x17, 0xd8, 0x41,
  0x19, 0xe0, 0xc1, 0x68, 0x42, 0x00, 0x5c, 0xf0, 0xb0, 0x8c, 0x03, 0x46,
  0x0c, 0x14, 0x00, 0x04, 0xc1, 0x60, 0x11, 0x85, 0x38, 0x08, 0x83, 0x40,
  0x0f, 0xd2, 0x80, 0x0f, 0x46, 0x13, 0x02, 0xe0, 0x82, 0x87, 0x07, 0x06,
  0xcf, 0xcc, 0x08, 0xe0, 0x73, 0x63, 0xf0, 0xcc, 0x88, 0x00, 0x3e, 0xa3,
  0x09, 0x97, 0x30, 0xdc, 0x10, 0x88, 0x02, 0x18, 0xcc, 0x32, 0x08, 0x43,
  0x70, 0xde, 0x33, 0x0b, 0x0c, 0xf9, 0x18, 0x18, 0xec, 0x01, 0x08, 0x2e,
  0x78, 0x66, 0x43, 0x40, 0x1f, 0x0b, 0xe4, 0x00, 0x3e, 0x67, 0x06, 0xcf,
  0x2c, 0x50, 0xe4, 0x63, 0x68, 0x10, 0x0a, 0x20, 0xb8, 0xe0, 0x99, 0x0d,
  0x01, 0x7d, 0x2c, 0xc0, 0x03, 0xf8, 0xcc, 0x12, 0x0c, 0x03, 0x15, 0x8f,
  0x18, 0x04, 0x8e, 0x30, 0x50, 0xf1, 0x80, 0x41, 0x40, 0x08, 0x16, 0x07,
  0x70, 0x20, 0x82, 0x82, 0x83, 0x00, 0xca, 0x0d, 0x02, 0xa9, 0x20, 0x0e,
  0x64, 0x34, 0x61, 0x0d, 0x82, 0xe1, 0x86, 0xc0, 0x16, 0xc0, 0x60, 0x96,
  0x81, 0x70, 0x82, 0xe1, 0x08, 0x04, 0x14, 0x8a, 0xef, 0xe6, 0xe0, 0xd9,
  0x70, 0x44, 0xa0, 0x14, 0x5f, 0x0d, 0xc1, 0x0e, 0x47, 0x2c, 0xa4, 0x50,
  0x7c, 0x15, 0x08, 0x7b, 0x7a, 0xf0, 0x6c, 0x38, 0x22, 0x70, 0x8a, 0xaf,
  0x82, 0x61, 0x67, 0x19, 0x9e, 0x22, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0xc8, 0x1c, 0x68, 0x21, 0xba, 0x60, 0xd0, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x40, 0xe8, 0x60, 0x0b, 0xd2, 0x05, 0x83, 0x6c, 0x38, 0x07,
  0x10, 0x98, 0x80, 0x0e, 0x20, 0xb8, 0xe2, 0x99, 0x61, 0x41, 0x7c, 0xae,
  0x78, 0x66, 0x59, 0x10, 0x1f, 0xb3, 0x85, 0x21, 0x3e, 0x76, 0x0b, 0x42,
  0x7c, 0x2a, 0x59, 0x76, 0xb8, 0x21, 0x18, 0x07, 0x33, 0x98, 0x65, 0x30,
  0x8e, 0xc0, 0x9a, 0x55, 0x10, 0x41, 0x31, 0x1b, 0x54, 0x20, 0xc0, 0x88,
  0x81, 0x02, 0x80, 0x20, 0x18, 0x2c, 0xf9, 0x80, 0x0e, 0xb7, 0x10, 0xc4,
  0x03, 0x38, 0xcc, 0xc3, 0x68, 0x42, 0x00, 0x5c, 0xf0, 0x70, 0x96, 0xe0,
  0x18, 0xa8, 0x78, 0x04, 0xc3, 0x2f, 0x8a, 0xe1, 0x06, 0x6a, 0x1d, 0xcc,
  0xc0, 0x66, 0x81, 0x1d, 0x40, 0x30, 0xdc, 0x40, 0x05, 0x68, 0x50, 0x43,
  0xa0, 0xb3, 0x0c, 0x48, 0x12, 0x18, 0x66, 0x0b, 0x22, 0xa8, 0xc0, 0x0c,
  0xa0, 0x02, 0x0b, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0x60, 0x21, 0x89,
  0x79, 0x10, 0x87, 0x80, 0x1f, 0xd6, 0xc1, 0x1f, 0x46, 0x13, 0x02, 0xe0,
  0x82, 0x87, 0xb3, 0x04, 0xc9, 0x40, 0xc5, 0x23, 0x20, 0xb4, 0x71, 0xd8,
  0x2e, 0xd8, 0x03, 0x08, 0x86, 0x1b, 0xc0, 0x20, 0x40, 0x83, 0xe1, 0x86,
  0x0f, 0x1f, 0xcc, 0xa0, 0x84, 0x40, 0x67, 0x19, 0x94, 0x25, 0x30, 0x30,
  0x08, 0x07, 0x11, 0x94, 0x18, 0xc4, 0x01, 0x54, 0x20, 0xc0, 0x88, 0x81,
  0x02, 0x80, 0x20, 0x18, 0x2c, 0x2f, 0xe1, 0x0f, 0xed, 0x10, 0x9c, 0x84,
  0x3d, 0xa4, 0xc4, 0x68, 0x42, 0x00, 0x5c, 0xf0, 0x70, 0x96, 0x60, 0x19,
  0xa8, 0x78, 0x04, 0x45, 0x3d, 0x92, 0x52, 0x28, 0x9d, 0x65, 0x60, 0x9a,
  0xc0, 0xd0, 0x20, 0x1d, 0x44, 0x50, 0x68, 0x90, 0x07, 0x50, 0x81, 0x00,
  0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0xb0, 0xdc, 0x84, 0x49, 0xd4, 0x43,
  0xf0, 0x12, 0xfe, 0x10, 0x13, 0xa3, 0x09, 0x01, 0x70, 0xc1, 0xc3, 0x59,
  0x82, 0x66, 0xa0, 0xe2, 0x11, 0x18, 0xfd, 0x58, 0xec, 0x43, 0x03, 0xf9,
  0x58, 0xb5, 0x06, 0xf2, 0xb1, 0x45, 0x0d, 0xe4, 0x63, 0x44, 0x1b, 0xc8,
  0xc7, 0x02, 0x01, 0x3e, 0x16, 0xc4, 0x81, 0x7c, 0xac, 0x30, 0xe0, 0x63,
  0x01, 0x1c, 0xc8, 0xc7, 0x82, 0x01, 0x3e, 0x17, 0x98, 0x9b, 0x25, 0x78,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x00, 0x1a, 0x8b, 0x98, 0x70, 0x85,
  0x0b, 0x06, 0x8d, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x54, 0x16, 0x33,
  0xf1, 0x0a, 0x17, 0x0c, 0xb2, 0x81, 0x2c, 0x40, 0x60, 0x42, 0x59, 0x80,
  0xe0, 0x8a, 0x67, 0x56, 0x0b, 0x41, 0x7c, 0xae, 0x78, 0x66, 0xb6, 0x10,
  0xc4, 0xc7, 0x66, 0x62, 0x88, 0x8f, 0xd1, 0x84, 0x10, 0x9f, 0xe1, 0x86,
  0x25, 0x2d, 0xd0, 0x60, 0xba, 0x41, 0x2d, 0x98, 0x60, 0xb8, 0x21, 0x30,
  0x89, 0x33, 0xb0, 0x93, 0x10, 0x0b, 0x10, 0x4c, 0x37, 0x04, 0x83, 0x30,
  0xdc, 0xe0, 0xb8, 0x05, 0x1a, 0x4c, 0x37, 0xbc, 0xc5, 0x13, 0x0c, 0x37,
  0x04, 0x2d, 0x71, 0x06, 0xe6, 0x12, 0x67, 0x01, 0x82, 0xe9, 0x86, 0x60,
  0x10, 0x86, 0x1b, 0xa4, 0xb9, 0x40, 0x83, 0xe9, 0x06, 0xba, 0x98, 0x82,
  0xe1, 0x86, 0x00, 0x26, 0xce, 0x60, 0xba, 0x41, 0x11, 0x82, 0xe1, 0x86,
  0xea, 0x2e, 0xd0, 0x60, 0xba, 0x01, 0x2f, 0xac, 0x60, 0xb8, 0x21, 0xb0,
  0x89, 0x33, 0x98, 0x6e, 0x48, 0x84, 0xc0, 0x1c, 0x9c, 0x10, 0x81, 0x05,
  0xe8, 0x00, 0x02, 0x0b, 0x16, 0x10, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82,
  0xc1, 0x62, 0x1a, 0x75, 0x41, 0x16, 0x81, 0x5f, 0xb4, 0x05, 0x68, 0x8c,
  0x26, 0x04, 0xc0, 0x05, 0x0f, 0xad, 0x38, 0x40, 0x30, 0x62, 0xa0, 0x00,
  0x20, 0x08, 0x06, 0x8b, 0x6a, 0xe4, 0x05, 0x5a, 0x04, 0xa2, 0x11, 0x17,
  0xa4, 0x31, 0x9a, 0x10, 0x00, 0x17, 0x3c, 0xb4, 0x47, 0x2c, 0x44, 0x50,
  0x94, 0x3c, 0x40, 0x05, 0x02, 0x8c, 0x18, 0x28, 0x00, 0x08, 0x82, 0xc1,
  0x02, 0x1b, 0x7f, 0xe1, 0x16, 0x01, 0x6a, 0xdc, 0x85, 0x6a, 0x8c, 0x26,
  0x04, 0xc0, 0x05, 0x0f, 0xcd, 0xb8, 0x07, 0x10, 0x58, 0x20, 0x81, 0x60,
  0xc4, 0x40, 0x01, 0x40, 0x10, 0x0c, 0x96, 0xda, 0x20, 0x8d, 0xb9, 0x08,
  0x5a, 0x83, 0x2f, 0x5e, 0x63, 0x34, 0x21, 0x00, 0x2e, 0x78, 0x68, 0x10,
  0x1a, 0xc8, 0xc7, 0x9a, 0x35, 0x90, 0x8f, 0x21, 0x6a, 0x20, 0x1f, 0x23,
  0xda, 0x40, 0x3e, 0x16, 0x08, 0xf0, 0xb1, 0x20, 0x0e, 0xe4, 0x63, 0x85,
  0x01, 0x1f, 0x0b, 0xe0, 0x40, 0x3e, 0x16, 0x0c, 0xf0, 0xb9, 0xc0, 0xdc,
  0x2c, 0xc1, 0x33, 0xd0, 0x61, 0x08, 0x0e, 0x3f, 0x34, 0x30, 0x43, 0xd4,
  0x49, 0xfc, 0x05, 0x54, 0xa0, 0x16, 0x30, 0x62, 0xe0, 0x00, 0x20, 0x08,
  0x06, 0x0d, 0x79, 0xb8, 0x46, 0x69, 0x04, 0xbd, 0x31, 0xa8, 0x86, 0x6a,
  0xa8, 0x06, 0x6b, 0xfc, 0xc6, 0x2c, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
