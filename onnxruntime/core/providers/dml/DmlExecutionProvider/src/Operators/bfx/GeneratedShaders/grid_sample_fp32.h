#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c3e1dfa8eb75ad7f73be810276712848
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [36 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;                                       UAV  struct         r/w      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.RWStructuredBuffer<float>" = type { float }
%Constants = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }

define void @grid_sample() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %6 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %7 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %8 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %9 = extractvalue %dx.types.CBufRet.i32 %8, 0
  %10 = sdiv i32 %7, %9
  %11 = srem i32 %7, %9
  %12 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %13 = extractvalue %dx.types.CBufRet.i32 %12, 0
  %14 = icmp sge i32 %5, %13
  %15 = extractvalue %dx.types.CBufRet.i32 %8, 3
  %16 = icmp sge i32 %6, %15
  %17 = or i1 %14, %16
  %18 = icmp slt i32 %9, 0
  %19 = or i1 %17, %18
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 3
  %22 = icmp sge i32 %10, %21
  %23 = or i1 %19, %22
  br i1 %23, label %210, label %24

; <label>:24                                      ; preds = %0
  %25 = shl i32 %10, 1
  %26 = mul nsw i32 %25, %15
  %27 = mul nsw i32 %26, %13
  %28 = mul nsw i32 %13, %6
  %29 = add i32 %27, %5
  %30 = add i32 %29, %28
  %31 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 %30, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %32 = extractvalue %dx.types.ResRet.f32 %31, 0
  %33 = mul nsw i32 %13, %15
  %34 = add i32 %29, %33
  %35 = add i32 %34, %28
  %36 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 %35, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %37 = extractvalue %dx.types.ResRet.f32 %36, 0
  %38 = fadd fast float %32, 1.000000e+00
  %39 = fmul fast float %38, 5.000000e-01
  %40 = fadd fast float %37, 1.000000e+00
  %41 = fmul fast float %40, 5.000000e-01
  %42 = extractvalue %dx.types.CBufRet.i32 %20, 2
  %43 = icmp eq i32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.i32 %8, 2
  %45 = extractvalue %dx.types.CBufRet.i32 %8, 1
  br i1 %43, label %46, label %53

; <label>:46                                      ; preds = %24
  %47 = sitofp i32 %44 to float
  %48 = fmul fast float %47, %39
  %49 = fadd fast float %48, -5.000000e-01
  %50 = sitofp i32 %45 to float
  %51 = fmul fast float %50, %41
  %52 = fadd fast float %51, -5.000000e-01
  br label %60

; <label>:53                                      ; preds = %24
  %54 = add nsw i32 %44, -1
  %55 = sitofp i32 %54 to float
  %56 = fmul fast float %55, %39
  %57 = add nsw i32 %45, -1
  %58 = sitofp i32 %57 to float
  %59 = fmul fast float %58, %41
  br label %60

; <label>:60                                      ; preds = %53, %46
  %61 = phi float [ %56, %53 ], [ %49, %46 ]
  %62 = phi float [ %59, %53 ], [ %52, %46 ]
  %63 = mul nsw i32 %9, %10
  %64 = add i32 %11, %63
  %65 = mul i32 %45, %64
  %66 = mul i32 %65, %44
  %67 = mul nsw i32 %63, %15
  %68 = mul nsw i32 %67, %13
  %69 = mul nsw i32 %15, %11
  %70 = mul nsw i32 %69, %13
  %71 = extractvalue %dx.types.CBufRet.i32 %20, 1
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %148

; <label>:73                                      ; preds = %60
  %74 = fcmp fast ole float %62, -1.000000e+00
  %75 = sitofp i32 %45 to float
  %76 = fcmp fast ole float %75, %62
  %77 = or i1 %74, %76
  %78 = fcmp fast ole float %61, -1.000000e+00
  %79 = or i1 %78, %77
  %80 = sitofp i32 %44 to float
  %81 = fcmp fast ole float %80, %61
  %82 = or i1 %81, %79
  br i1 %82, label %205, label %83

; <label>:83                                      ; preds = %73
  %84 = call float @dx.op.unary.f32(i32 27, float %62)  ; Round_ni(value)
  %85 = fptosi float %84 to i32
  %86 = call float @dx.op.unary.f32(i32 27, float %61)  ; Round_ni(value)
  %87 = fptosi float %86 to i32
  %88 = add nsw i32 %85, 1
  %89 = add nsw i32 %87, 1
  %90 = sitofp i32 %85 to float
  %91 = fsub fast float %62, %90
  %92 = sitofp i32 %87 to float
  %93 = fsub fast float %61, %92
  %94 = fsub fast float 1.000000e+00, %91
  %95 = fsub fast float 1.000000e+00, %93
  %96 = or i32 %87, %85
  %97 = icmp sgt i32 %96, -1
  br i1 %97, label %98, label %104

; <label>:98                                      ; preds = %83
  %99 = mul nsw i32 %85, %44
  %100 = add i32 %87, %66
  %101 = add i32 %100, %99
  %102 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %101, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %103 = extractvalue %dx.types.ResRet.f32 %102, 0
  br label %104

; <label>:104                                     ; preds = %98, %83
  %105 = phi float [ %103, %98 ], [ 0.000000e+00, %83 ]
  %106 = icmp sgt i32 %85, -1
  %107 = add nsw i32 %44, -1
  %108 = icmp slt i32 %87, %107
  %109 = and i1 %106, %108
  br i1 %109, label %110, label %116

; <label>:110                                     ; preds = %104
  %111 = mul nsw i32 %85, %44
  %112 = add i32 %111, %66
  %113 = add i32 %112, %89
  %114 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %113, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %115 = extractvalue %dx.types.ResRet.f32 %114, 0
  br label %116

; <label>:116                                     ; preds = %110, %104
  %117 = phi float [ %115, %110 ], [ 0.000000e+00, %104 ]
  %118 = add nsw i32 %45, -1
  %119 = icmp slt i32 %85, %118
  %120 = icmp sgt i32 %87, -1
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %128

; <label>:122                                     ; preds = %116
  %123 = mul nsw i32 %88, %44
  %124 = add i32 %87, %66
  %125 = add i32 %124, %123
  %126 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %125, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %127 = extractvalue %dx.types.ResRet.f32 %126, 0
  br label %128

; <label>:128                                     ; preds = %122, %116
  %129 = phi float [ %127, %122 ], [ 0.000000e+00, %116 ]
  %130 = and i1 %119, %108
  br i1 %130, label %131, label %137

; <label>:131                                     ; preds = %128
  %132 = mul nsw i32 %88, %44
  %133 = add i32 %89, %66
  %134 = add i32 %133, %132
  %135 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %134, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %136 = extractvalue %dx.types.ResRet.f32 %135, 0
  br label %137

; <label>:137                                     ; preds = %131, %128
  %138 = phi float [ %136, %131 ], [ 0.000000e+00, %128 ]
  %139 = fmul fast float %105, %95
  %140 = fmul fast float %117, %93
  %141 = fmul fast float %129, %95
  %142 = fmul fast float %138, %93
  %143 = fadd fast float %142, %141
  %144 = fmul fast float %143, %91
  %145 = fadd fast float %140, %139
  %146 = fmul fast float %145, %94
  %147 = fadd fast float %146, %144
  br label %205

; <label>:148                                     ; preds = %60
  %149 = call float @dx.op.unary.f32(i32 27, float %62)  ; Round_ni(value)
  %150 = fptosi float %149 to i32
  %151 = call float @dx.op.unary.f32(i32 27, float %61)  ; Round_ni(value)
  %152 = fptosi float %151 to i32
  %153 = add nsw i32 %150, 1
  %154 = add nsw i32 %152, 1
  %155 = sitofp i32 %150 to float
  %156 = fsub fast float %62, %155
  %157 = sitofp i32 %152 to float
  %158 = fsub fast float %61, %157
  %159 = fsub fast float 1.000000e+00, %156
  %160 = fsub fast float 1.000000e+00, %158
  %161 = icmp slt i32 %150, 0
  %162 = select i1 %161, i32 0, i32 %150
  %163 = icmp sge i32 %162, %45
  %164 = add nsw i32 %45, -1
  %165 = select i1 %163, i32 %164, i32 %162
  %166 = icmp slt i32 %152, 0
  %167 = select i1 %166, i32 0, i32 %152
  %168 = icmp sge i32 %167, %44
  %169 = add nsw i32 %44, -1
  %170 = select i1 %168, i32 %169, i32 %167
  %171 = icmp slt i32 %153, 0
  %172 = select i1 %171, i32 0, i32 %153
  %173 = icmp sge i32 %172, %45
  %174 = select i1 %173, i32 %164, i32 %172
  %175 = icmp slt i32 %154, 0
  %176 = select i1 %175, i32 0, i32 %154
  %177 = icmp sge i32 %176, %44
  %178 = select i1 %177, i32 %169, i32 %176
  %179 = mul nsw i32 %165, %44
  %180 = add nsw i32 %179, %66
  %181 = add nsw i32 %180, %170
  %182 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %181, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %183 = extractvalue %dx.types.ResRet.f32 %182, 0
  %184 = add nsw i32 %180, %178
  %185 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %184, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %186 = extractvalue %dx.types.ResRet.f32 %185, 0
  %187 = mul nsw i32 %174, %44
  %188 = add i32 %170, %66
  %189 = add i32 %188, %187
  %190 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %189, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %191 = extractvalue %dx.types.ResRet.f32 %190, 0
  %192 = add nsw i32 %187, %66
  %193 = add nsw i32 %192, %178
  %194 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3, i32 %193, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %195 = extractvalue %dx.types.ResRet.f32 %194, 0
  %196 = fmul fast float %183, %160
  %197 = fmul fast float %186, %158
  %198 = fmul fast float %191, %160
  %199 = fmul fast float %195, %158
  %200 = fadd fast float %199, %198
  %201 = fmul fast float %200, %156
  %202 = fadd fast float %197, %196
  %203 = fmul fast float %202, %159
  %204 = fadd fast float %203, %201
  br label %205

; <label>:205                                     ; preds = %148, %137, %73
  %206 = phi float [ %204, %148 ], [ %147, %137 ], [ 0.000000e+00, %73 ]
  %207 = add i32 %68, %5
  %208 = add i32 %207, %70
  %209 = add i32 %208, %28
  call void @dx.op.rawBufferStore.f32(i32 140, %dx.types.Handle %1, i32 %209, i32 0, float %206, float undef, float undef, float undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %210

; <label>:210                                     ; preds = %205, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.f32(i32, %dx.types.Handle, i32, i32, float, float, float, float, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !10, null}
!5 = !{!6, !8, !9}
!6 = !{i32 0, %"class.RWStructuredBuffer<float>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!7 = !{i32 1, i32 4}
!8 = !{i32 1, %"class.RWStructuredBuffer<float>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!9 = !{i32 2, %"class.RWStructuredBuffer<float>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!10 = !{!11}
!11 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 36, null}
!12 = !{void ()* @grid_sample, !"grid_sample", null, !4, !13}
!13 = !{i32 0, i64 16, i32 4, !14}
!14 = !{i32 16, i32 16, i32 1}

#endif

const unsigned char g_grid_sample[] = {
  0x44, 0x58, 0x42, 0x43, 0x40, 0xc7, 0x09, 0xc0, 0xe9, 0xb7, 0x47, 0x85,
  0x33, 0x6a, 0x05, 0x9d, 0xc7, 0xf9, 0x34, 0xe1, 0x01, 0x00, 0x00, 0x00,
  0x60, 0x0b, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xa8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc3, 0xe1, 0xdf, 0xa8, 0xeb, 0x75, 0xad, 0x7f,
  0x73, 0xbe, 0x81, 0x02, 0x76, 0x71, 0x28, 0x48, 0x44, 0x58, 0x49, 0x4c,
  0x24, 0x0a, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0x89, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0c, 0x0a, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x80, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xa4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x93, 0x22, 0xa4, 0x84, 0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8a, 0x8c, 0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x78, 0x23, 0x00,
  0x25, 0x00, 0x14, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0x63, 0x0c, 0x22, 0x33,
  0x00, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad,
  0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x0a, 0x63, 0x8c, 0x19, 0x73, 0x04, 0x08,
  0xa1, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86,
  0x85, 0x40, 0x41, 0x2a, 0xc7, 0x19, 0x6a, 0x0c, 0x34, 0x68, 0x95, 0x05,
  0x0c, 0x35, 0x86, 0x31, 0xc6, 0xa0, 0x41, 0xad, 0x0c, 0x66, 0x18, 0x7a,
  0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b,
  0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x8c, 0x31, 0x0a, 0x11, 0x87, 0x1a,
  0x24, 0xe7, 0x08, 0x82, 0x62, 0xa8, 0x81, 0xc6, 0xa0, 0x54, 0x07, 0x02,
  0x66, 0xfa, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x64,
  0xe1, 0x16, 0x66, 0x81, 0x1e, 0xe4, 0xa1, 0x1e, 0xc6, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x81, 0x1c, 0x44, 0xa1, 0x1e, 0xcc, 0xc1, 0x1c, 0xca,
  0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xfc,
  0x00, 0x05, 0x86, 0xf0, 0x25, 0x9c, 0xd3, 0x48, 0x13, 0xd0, 0x4c, 0x12,
  0x4a, 0xc6, 0x18, 0x63, 0x8c, 0x31, 0x06, 0xe9, 0x39, 0x02, 0x50, 0x98,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
  0x3c, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x79, 0x16, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0xf2, 0x34, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0xe4, 0x79, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x60, 0xc8, 0x23, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xa7, 0x02, 0x02, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x0b, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x1a, 0x25, 0x50, 0x04, 0xc5, 0x30, 0x02, 0x50, 0x18,
  0x85, 0x50, 0x48, 0x05, 0x42, 0x74, 0x04, 0x80, 0x78, 0x81, 0xd0, 0x9e,
  0x01, 0xa0, 0x3c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44,
  0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b,
  0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81,
  0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84,
  0xe1, 0x98, 0x20, 0x0c, 0xc8, 0x06, 0x61, 0x20, 0x26, 0x08, 0x43, 0xb2,
  0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08,
  0x83, 0x32, 0x41, 0xc8, 0x24, 0x02, 0x13, 0x84, 0x61, 0x99, 0x20, 0x50,
  0xcf, 0x04, 0x61, 0x60, 0x36, 0x08, 0xc3, 0xb3, 0x61, 0x51, 0x16, 0x46,
  0x51, 0x86, 0xc6, 0x71, 0x1c, 0x68, 0xc3, 0x32, 0x2c, 0x8c, 0x32, 0x0c,
  0x8d, 0xe3, 0x38, 0xd0, 0x86, 0x85, 0x58, 0x18, 0x85, 0x18, 0x1a, 0xc7,
  0x71, 0xa0, 0x0d, 0x43, 0x24, 0x4d, 0x13, 0x84, 0x2d, 0x9a, 0x20, 0x0c,
  0xcd, 0x06, 0x44, 0xa9, 0x18, 0x45, 0x19, 0x2c, 0x60, 0x43, 0x70, 0x6d,
  0x20, 0x00, 0x0a, 0x03, 0x26, 0x08, 0x02, 0xc0, 0xe5, 0x4c, 0x2e, 0x8d,
  0xec, 0x6b, 0x2e, 0xac, 0x0d, 0x8e, 0xad, 0x6c, 0x82, 0xc0, 0x41, 0x13,
  0x84, 0xc1, 0xd9, 0x30, 0x74, 0xdd, 0xb0, 0x81, 0x50, 0xb8, 0xc7, 0xdb,
  0x50, 0x68, 0x1b, 0x90, 0x7d, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2,
  0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c, 0x17, 0xbb,
  0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84, 0x0c, 0xcf,
  0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4, 0x21, 0xc3,
  0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63,
  0x9b, 0x12, 0x20, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea,
  0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x58, 0x1d, 0x32, 0x3c, 0x97, 0x32,
  0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9, 0x29, 0xc1,
  0x07, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x56, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x98, 0xc0,
  0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51,
  0xe9, 0x00, 0x83, 0x5f, 0xdc, 0xb6, 0x0d, 0x60, 0xc3, 0xe5, 0x3b, 0x8f,
  0x1f, 0x01, 0xd6, 0x46, 0x15, 0x05, 0x11, 0xb1, 0x93, 0x13, 0x11, 0x7e,
  0x71, 0xdb, 0x16, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04,
  0x30, 0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f,
  0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc0, 0x62, 0x44, 0xc8,
  0xf0, 0x4b, 0x00, 0xf3, 0x2c, 0x04, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x1d, 0x01, 0x00, 0x00, 0x13, 0x04, 0x52, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x34, 0xca, 0x52, 0xa0, 0x06, 0x4a, 0xae, 0x6c,
  0x4a, 0x37, 0xa0, 0xec, 0x0a, 0x53, 0x80, 0x50, 0x11, 0x94, 0x00, 0x99,
  0x19, 0x80, 0x31, 0x02, 0x10, 0x04, 0x41, 0xf8, 0x1b, 0x23, 0x00, 0x41,
  0x10, 0x84, 0x7f, 0x61, 0x8c, 0x00, 0x04, 0x41, 0x10, 0xff, 0x85, 0x11,
  0x80, 0x31, 0x02, 0x10, 0x04, 0x41, 0xfc, 0x03, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x50, 0x71, 0xcd, 0xa1, 0x69, 0xd3, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x54, 0x9d, 0x83, 0x70, 0x1c, 0x35, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x95, 0xf7, 0x24, 0x9a, 0x56, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x41, 0xf5, 0x41, 0xcb, 0xb6, 0x59, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x40, 0x94, 0xc1, 0xc3, 0x8d, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01,
  0x61, 0x06, 0x10, 0x18, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x71,
  0x06, 0x11, 0x18, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x44, 0x06,
  0x11, 0x21, 0x06, 0xa3, 0x09, 0x01, 0x50, 0x43, 0x40, 0x45, 0x08, 0x36,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x12, 0x1a, 0x54, 0x48, 0x19, 0x8c,
  0x26, 0x04, 0xc0, 0x70, 0x43, 0x12, 0x9c, 0xc1, 0x68, 0xc2, 0x31, 0x0c,
  0x37, 0x28, 0xc1, 0x19, 0xd4, 0x10, 0xec, 0x70, 0x43, 0x92, 0x06, 0x68,
  0x50, 0x42, 0xb0, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x20, 0xc1, 0x41,
  0x07, 0xad, 0xc1, 0x68, 0x42, 0x30, 0x0c, 0x37, 0x30, 0xc1, 0x19, 0x14,
  0x11, 0xec, 0x2c, 0x43, 0x14, 0x04, 0xe5, 0xc8, 0xc1, 0x59, 0xa0, 0x88,
  0xc0, 0x82, 0x46, 0x04, 0xe6, 0x54, 0x22, 0x28, 0xe1, 0x82, 0x0a, 0x04,
  0x18, 0x31, 0x50, 0x00, 0x10, 0x04, 0x83, 0xa5, 0x0f, 0xd8, 0x80, 0x0b,
  0xea, 0x80, 0x0c, 0xe6, 0x60, 0x34, 0x21, 0x00, 0x6c, 0x8a, 0x44, 0x50,
  0x45, 0x00, 0x15, 0x1c, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x8b,
  0x28, 0xc4, 0x41, 0x18, 0x04, 0x7a, 0x90, 0x06, 0x78, 0x30, 0x9a, 0x10,
  0x00, 0x66, 0x94, 0x01, 0x7c, 0x2c, 0x50, 0x03, 0xf9, 0xd8, 0x70, 0x06,
  0xf0, 0xb1, 0x80, 0x0d, 0xe4, 0x33, 0x9a, 0x50, 0x09, 0xc3, 0x0d, 0x41,
  0x28, 0x80, 0xc1, 0x68, 0xc2, 0x18, 0x08, 0xa3, 0x09, 0x64, 0x10, 0xcc,
  0x32, 0x08, 0xc3, 0x70, 0x82, 0x31, 0x0b, 0x10, 0xf9, 0x58, 0x20, 0x07,
  0xf0, 0x39, 0xc2, 0x98, 0x05, 0x89, 0x7c, 0x2c, 0xa8, 0x03, 0xf8, 0xcc,
  0x12, 0x10, 0x86, 0x80, 0x02, 0x08, 0x2e, 0x30, 0x66, 0xc1, 0x23, 0x1f,
  0x53, 0x46, 0x01, 0x04, 0x17, 0x18, 0xb3, 0x00, 0x92, 0xcf, 0x2c, 0x01,
  0x31, 0x50, 0x61, 0x20, 0x03, 0x25, 0x0c, 0x54, 0x18, 0xc4, 0x00, 0x09,
  0x26, 0x07, 0x71, 0x20, 0x82, 0x8a, 0x83, 0x00, 0x2a, 0x0a, 0xa4, 0x82,
  0x49, 0x8c, 0x80, 0x03, 0x11, 0x58, 0x30, 0x07, 0x22, 0x30, 0x39, 0xb0,
  0x03, 0x11, 0x58, 0x50, 0x07, 0x22, 0x18, 0x4d, 0x78, 0x83, 0x60, 0xb8,
  0x21, 0xd8, 0x05, 0x30, 0x98, 0x65, 0x28, 0x9e, 0x60, 0x38, 0x62, 0x39,
  0x85, 0xe2, 0x3b, 0xcd, 0xd8, 0x70, 0x44, 0xd0, 0x14, 0x5f, 0x0d, 0xc1,
  0x0e, 0x47, 0x40, 0xab, 0x50, 0x7c, 0x15, 0x08, 0x7b, 0x60, 0x60, 0x6c,
  0x38, 0x22, 0x98, 0x8a, 0xaf, 0x82, 0x61, 0x67, 0x19, 0x20, 0x23, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x67, 0x1d, 0x72, 0x81, 0xba, 0x60,
  0xd0, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0xed, 0xb0, 0x0b, 0xd7,
  0x05, 0x83, 0x6c, 0x60, 0x07, 0x10, 0x98, 0xd0, 0x0e, 0x20, 0xb8, 0xc2,
  0x98, 0x6d, 0x41, 0x7c, 0xae, 0x30, 0x66, 0x5e, 0x10, 0x1f, 0xc3, 0x85,
  0x21, 0x3e, 0x96, 0x0b, 0x42, 0x7c, 0x2a, 0x59, 0x76, 0xb8, 0x21, 0x40,
  0x07, 0x33, 0x98, 0x65, 0x38, 0x90, 0xc0, 0x9a, 0x38, 0x10, 0x41, 0x31,
  0x1f, 0x54, 0x20, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x2c, 0xfe,
  0xd0, 0x0e, 0xbc, 0x10, 0xd8, 0x43, 0x39, 0xd0, 0xc3, 0x68, 0x42, 0x00,
  0xcc, 0x12, 0x20, 0x03, 0x15, 0x86, 0x70, 0x90, 0x86, 0x31, 0xdc, 0x30,
  0xbd, 0x83, 0x19, 0x18, 0x1e, 0xc0, 0x03, 0x08, 0x86, 0x1b, 0xa6, 0x00,
  0x0d, 0x6a, 0x08, 0x74, 0x96, 0x21, 0x51, 0x02, 0xbb, 0xf6, 0x40, 0x04,
  0x15, 0xa4, 0x01, 0x54, 0x50, 0xc1, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18,
  0x2c, 0x28, 0x71, 0x0f, 0xe6, 0x10, 0x80, 0xc4, 0x3b, 0xf8, 0xc3, 0x68,
  0x42, 0x00, 0xcc, 0x12, 0x28, 0x03, 0x15, 0x86, 0x90, 0xe0, 0x06, 0x62,
  0xa0, 0x90, 0x0f, 0x20, 0x18, 0x6e, 0xf0, 0x02, 0x34, 0x18, 0x6e, 0xe8,
  0xf6, 0xc1, 0x0c, 0x4a, 0x08, 0x74, 0x96, 0x61, 0x61, 0x02, 0xf3, 0x4a,
  0x41, 0x04, 0x05, 0x06, 0x73, 0x00, 0x15, 0x08, 0x30, 0x62, 0xa0, 0x00,
  0x20, 0x08, 0x06, 0x8b, 0x4c, 0x84, 0x04, 0x3c, 0x04, 0x2a, 0x91, 0x0f,
  0x28, 0x31, 0x9a, 0x10, 0x00, 0xb3, 0x04, 0xcc, 0x40, 0x85, 0x21, 0x2c,
  0xec, 0xa1, 0x54, 0x22, 0xe9, 0x2c, 0x43, 0xe3, 0x04, 0x56, 0x06, 0xac,
  0x20, 0x82, 0x2a, 0x03, 0x3d, 0x80, 0x0a, 0x04, 0x18, 0x31, 0x50, 0x00,
  0x10, 0x04, 0x83, 0x25, 0x27, 0x50, 0xe2, 0x1e, 0x82, 0x98, 0x00, 0x89,
  0x97, 0x18, 0x4d, 0x08, 0x80, 0x59, 0x02, 0x67, 0xa0, 0xc2, 0x10, 0x1a,
  0xfd, 0x60, 0x8c, 0x23, 0x03, 0xf9, 0xd8, 0x74, 0x06, 0xf2, 0x31, 0xc5,
  0x0c, 0xe4, 0x63, 0x44, 0x1a, 0xc8, 0xc7, 0x02, 0x01, 0x3e, 0x16, 0xb4,
  0x81, 0x7c, 0xac, 0x30, 0xe0, 0x63, 0x01, 0x1b, 0xc8, 0xc7, 0x82, 0x01,
  0x3e, 0xb3, 0x04, 0xd0, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c, 0x63,
  0x11, 0x13, 0xac, 0x70, 0xc1, 0xa0, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30,
  0x78, 0xca, 0x62, 0x26, 0x5e, 0xe1, 0x82, 0x41, 0x36, 0x90, 0x05, 0x08,
  0x4c, 0x28, 0x0b, 0x10, 0x5c, 0x61, 0xcc, 0x66, 0x21, 0x88, 0xcf, 0x15,
  0xc6, 0xcc, 0x16, 0x82, 0xf8, 0x18, 0x4c, 0x0c, 0xf1, 0xb1, 0x98, 0x10,
  0xe2, 0x33, 0xdc, 0xb0, 0xa4, 0x05, 0x1a, 0x4c, 0x37, 0xa8, 0x05, 0x13,
  0x0c, 0x37, 0x04, 0xe8, 0x70, 0x06, 0x96, 0x0e, 0x62, 0x01, 0x82, 0xe9,
  0x86, 0x60, 0x10, 0x86, 0x1b, 0x1c, 0xb7, 0x40, 0x83, 0xe9, 0x86, 0xb7,
  0x78, 0x82, 0xe1, 0x86, 0xc0, 0x1d, 0xce, 0xc0, 0xde, 0xe1, 0x2c, 0x40,
  0x30, 0xdd, 0x10, 0x0c, 0xc2, 0x70, 0x83, 0x34, 0x17, 0x68, 0x30, 0xdd,
  0x40, 0x17, 0x53, 0x30, 0xdc, 0x10, 0xc8, 0xc3, 0x19, 0x4c, 0x37, 0x28,
  0x42, 0x30, 0xdc, 0x50, 0xdd, 0x05, 0x1a, 0x4c, 0x37, 0xe0, 0x85, 0x15,
  0x0c, 0x37, 0x04, 0xf7, 0x70, 0x06, 0xd3, 0x0d, 0x89, 0x10, 0x98, 0x93,
  0x0f, 0x22, 0xb0, 0xe0, 0x1c, 0x40, 0x60, 0xc1, 0x02, 0x82, 0x11, 0x03,
  0x05, 0x00, 0x41, 0x30, 0x58, 0x4c, 0xa3, 0x2e, 0xc8, 0x22, 0xf0, 0x8b,
  0xb6, 0xe0, 0x8b, 0xd1, 0x84, 0x00, 0x30, 0xc2, 0x00, 0xc1, 0x88, 0x81,
  0x02, 0x80, 0x20, 0x18, 0x2c, 0xa9, 0x81, 0x17, 0x67, 0x11, 0x84, 0x06,
  0x5c, 0xfc, 0xc5, 0x68, 0x42, 0x00, 0x58, 0x13, 0x12, 0x22, 0x28, 0xe9,
  0x1d, 0xa0, 0x02, 0x01, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0x60, 0x71,
  0x8d, 0xbe, 0x60, 0x8b, 0xc0, 0x34, 0xea, 0x82, 0x34, 0x46, 0x13, 0x02,
  0xc0, 0x8a, 0x79, 0x00, 0x81, 0x05, 0x0f, 0x08, 0x46, 0x0c, 0x14, 0x00,
  0x04, 0xc1, 0x60, 0x91, 0x8d, 0xd0, 0x80, 0x8b, 0x40, 0x35, 0xf2, 0x02,
  0x35, 0x46, 0x13, 0x02, 0xc0, 0x1a, 0x32, 0x90, 0x8f, 0x2d, 0x67, 0x20,
  0x1f, 0x3b, 0xcc, 0x40, 0x3e, 0x46, 0xa4, 0x81, 0x7c, 0x2c, 0x10, 0xe0,
  0x63, 0x41, 0x1b, 0xc8, 0xc7, 0x0a, 0x03, 0x3e, 0x16, 0xb0, 0x81, 0x7c,
  0x2c, 0x18, 0xe0, 0x33, 0x4b, 0x00, 0x0d, 0x74, 0x18, 0xc2, 0x23, 0x0f,
  0x8e, 0xbf, 0x14, 0xf5, 0x0f, 0x7a, 0x01, 0x15, 0xf8, 0x03, 0x54, 0x60,
  0x16, 0x30, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x0d, 0x78, 0xa8, 0x46,
  0x68, 0x04, 0xb9, 0x41, 0x9c, 0xc6, 0x69, 0x9c, 0x06, 0x6a, 0xdc, 0xc6,
  0x2c, 0x41, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00
};
