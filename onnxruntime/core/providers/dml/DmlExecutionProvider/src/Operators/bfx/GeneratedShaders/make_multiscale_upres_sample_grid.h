#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 872769f182da51fcce9568e29b2006c9
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [12 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.RWStructuredBuffer<float>" = type { float }
%Constants = type { i32, i32, i32 }

define void @make_multiscale_upres_sample_grid() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 1
  %8 = icmp sge i32 %4, %7
  %9 = extractvalue %dx.types.CBufRet.i32 %6, 2
  %10 = icmp sge i32 %5, %9
  %11 = or i1 %8, %10
  br i1 %11, label %86, label %12

; <label>:12                                      ; preds = %0
  %13 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %14 = extractvalue %dx.types.ResRet.f32 %13, 0
  %15 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 1, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %16 = extractvalue %dx.types.ResRet.f32 %15, 0
  %17 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 2, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %18 = extractvalue %dx.types.ResRet.f32 %17, 0
  %19 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 3, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2, i32 4, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %22 = extractvalue %dx.types.ResRet.f32 %21, 0
  %23 = fmul fast float %22, %20
  %24 = call float @dx.op.unary.f32(i32 27, float %23)  ; Round_ni(value)
  %25 = fmul fast float %22, %18
  %26 = call float @dx.op.unary.f32(i32 27, float %25)  ; Round_ni(value)
  %27 = fdiv fast float %14, %22
  %28 = call float @dx.op.unary.f32(i32 27, float %27)  ; Round_ni(value)
  %29 = fcmp fast ogt float %28, 0.000000e+00
  %30 = fadd fast float %28, -1.000000e+00
  %31 = select i1 %29, float %30, float %28
  %32 = fdiv fast float %16, %22
  %33 = call float @dx.op.unary.f32(i32 27, float %32)  ; Round_ni(value)
  %34 = fcmp fast ogt float %33, 0.000000e+00
  %35 = fadd fast float %33, -1.000000e+00
  %36 = select i1 %34, float %35, float %33
  %37 = sitofp i32 %4 to float
  %38 = fadd fast float %37, 5.000000e-01
  %39 = fadd fast float %38, %14
  %40 = fdiv fast float %18, %26
  %41 = fmul fast float %40, %39
  %42 = fsub fast float %41, %31
  %43 = sitofp i32 %7 to float
  %44 = fdiv fast float %42, %43
  %45 = sitofp i32 %5 to float
  %46 = fadd fast float %45, 5.000000e-01
  %47 = fadd fast float %46, %16
  %48 = fdiv fast float %20, %24
  %49 = fmul fast float %48, %47
  %50 = fsub fast float %49, %36
  %51 = sitofp i32 %9 to float
  %52 = fdiv fast float %50, %51
  %53 = fmul fast float %44, 2.000000e+00
  %54 = fadd fast float %53, -1.000000e+00
  %55 = fmul fast float %52, 2.000000e+00
  %56 = fadd fast float %55, -1.000000e+00
  %57 = extractvalue %dx.types.CBufRet.i32 %6, 0
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %86

; <label>:59                                      ; preds = %12
  br label %60

; <label>:60                                      ; preds = %60, %59
  %61 = phi i32 [ %81, %60 ], [ 0, %59 ]
  %62 = shl i32 %61, 1
  %63 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.i32 %63, 1
  %65 = mul nsw i32 %62, %64
  %66 = extractvalue %dx.types.CBufRet.i32 %63, 2
  %67 = mul nsw i32 %65, %66
  %68 = mul nsw i32 %64, %5
  %69 = add i32 %67, %4
  %70 = add i32 %69, %68
  call void @dx.op.rawBufferStore.f32(i32 140, %dx.types.Handle %1, i32 %70, i32 0, float %54, float undef, float undef, float undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %71 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.i32 %71, 1
  %73 = mul nsw i32 %62, %72
  %74 = extractvalue %dx.types.CBufRet.i32 %71, 2
  %75 = mul nsw i32 %73, %74
  %76 = mul nsw i32 %74, %72
  %77 = mul nsw i32 %72, %5
  %78 = add i32 %75, %4
  %79 = add i32 %78, %76
  %80 = add i32 %79, %77
  call void @dx.op.rawBufferStore.f32(i32 140, %dx.types.Handle %1, i32 %80, i32 0, float %56, float undef, float undef, float undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %81 = add nuw nsw i32 %61, 1
  %82 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.i32 %82, 0
  %84 = icmp slt i32 %81, %83
  br i1 %84, label %60, label %85

; <label>:85                                      ; preds = %60
  br label %86

; <label>:86                                      ; preds = %85, %12, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.f32(i32, %dx.types.Handle, i32, i32, float, float, float, float, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !9, null}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.RWStructuredBuffer<float>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!7 = !{i32 1, i32 4}
!8 = !{i32 1, %"class.RWStructuredBuffer<float>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!9 = !{!10}
!10 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 12, null}
!11 = !{void ()* @make_multiscale_upres_sample_grid, !"make_multiscale_upres_sample_grid", null, !4, !12}
!12 = !{i32 0, i64 16, i32 4, !13}
!13 = !{i32 16, i32 16, i32 1}

#endif

const unsigned char g_make_multiscale_upres_sample_grid[] = {
  0x44, 0x58, 0x42, 0x43, 0x01, 0x92, 0x34, 0x32, 0xf7, 0x7d, 0x7e, 0x46,
  0xbb, 0x8b, 0x3d, 0xe8, 0xf1, 0x39, 0x56, 0x0d, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x09, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0x90, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x87, 0x27, 0x69, 0xf1, 0x82, 0xda, 0x51, 0xfc,
  0xce, 0x95, 0x68, 0xe2, 0x9b, 0x20, 0x06, 0xc9, 0x44, 0x58, 0x49, 0x4c,
  0x0c, 0x08, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xf4, 0x07, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xfa, 0x01, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xa4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x35, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x93, 0x22, 0xa4, 0x84, 0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8a, 0x8c, 0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x78, 0x23, 0x00,
  0x25, 0x00, 0x14, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0x63, 0x0c, 0x22, 0x33,
  0x00, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad,
  0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x0a, 0x63, 0x8c, 0x19, 0x73, 0x04, 0x08,
  0xa1, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86,
  0x85, 0x40, 0x41, 0x2a, 0xc7, 0x19, 0x6a, 0x0c, 0x34, 0x68, 0x95, 0x05,
  0x0c, 0x35, 0x86, 0x31, 0xc6, 0xa0, 0x41, 0xad, 0x0c, 0x66, 0x18, 0x7a,
  0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b,
  0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x8c, 0x31, 0x0a, 0x11, 0x87, 0x1a,
  0x24, 0xe7, 0x08, 0x82, 0x62, 0xa8, 0x81, 0xc6, 0xa0, 0x54, 0x07, 0x02,
  0x66, 0xfa, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x64,
  0xe1, 0x16, 0x66, 0x81, 0x1e, 0xe4, 0xa1, 0x1e, 0xc6, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x81, 0x1c, 0x44, 0xa1, 0x1e, 0xcc, 0xc1, 0x1c, 0xca,
  0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xfc,
  0x00, 0x05, 0x86, 0xf0, 0x25, 0x9c, 0xd3, 0x48, 0x13, 0xd0, 0x4c, 0x12,
  0x1a, 0xc6, 0x18, 0xa4, 0xe7, 0x08, 0x40, 0x61, 0x0a, 0x00, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x04, 0x10, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x16, 0x20,
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34,
  0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4,
  0x79, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0xc8, 0x23, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0xa7, 0x02, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x2c, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a,
  0x25, 0x50, 0x04, 0xc5, 0x30, 0x02, 0x50, 0x18, 0x85, 0x50, 0x20, 0x44,
  0x47, 0x00, 0x88, 0x17, 0x08, 0xed, 0x19, 0x00, 0xca, 0x33, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x84, 0xe1, 0x98, 0x20, 0x0c, 0xc8, 0x06, 0x61, 0x20,
  0x26, 0x08, 0x43, 0xb2, 0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06,
  0xc4, 0x20, 0x26, 0x08, 0x83, 0x32, 0x41, 0xc8, 0x22, 0x02, 0x13, 0x84,
  0x61, 0x99, 0x20, 0x50, 0xce, 0x04, 0x61, 0x60, 0x36, 0x08, 0xc3, 0xb3,
  0x61, 0x51, 0x16, 0x46, 0x51, 0x86, 0xc6, 0x71, 0x1c, 0x68, 0xc3, 0x32,
  0x2c, 0x8c, 0x32, 0x0c, 0x8d, 0xe3, 0x38, 0xd0, 0x06, 0x21, 0x92, 0x26,
  0x08, 0x1b, 0xb4, 0x01, 0x51, 0x28, 0x46, 0x51, 0x86, 0x06, 0xd8, 0x10,
  0x54, 0x1b, 0x08, 0x60, 0xb2, 0x80, 0x09, 0x82, 0x00, 0x30, 0x0c, 0xda,
  0xc2, 0xd6, 0xca, 0xbe, 0xda, 0xea, 0xd8, 0xe8, 0xd2, 0xe6, 0xc6, 0xc2,
  0xd8, 0xca, 0xbe, 0xea, 0xe0, 0xe4, 0xca, 0xe6, 0xbe, 0xe6, 0xc2, 0xda,
  0xe0, 0xd8, 0xca, 0xbe, 0xce, 0xe4, 0xd2, 0xc8, 0x26, 0x08, 0xdc, 0x33,
  0x41, 0x18, 0x9a, 0x0d, 0xc3, 0xb6, 0x0d, 0x1b, 0x08, 0x45, 0x7b, 0xb8,
  0x0d, 0x05, 0x96, 0x01, 0x57, 0x57, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25,
  0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x10, 0x54, 0x21, 0xc3, 0x73, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x10, 0x4d, 0xc8, 0xf0,
  0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6, 0x04, 0x46, 0x1d, 0x32,
  0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32,
  0xb6, 0x29, 0x01, 0x52, 0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad,
  0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0x60, 0xd5, 0x21, 0xc3, 0x73, 0x29,
  0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12,
  0x74, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x56, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x98, 0xc0,
  0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51,
  0xe9, 0x00, 0x83, 0x5f, 0xdc, 0xb6, 0x0d, 0x60, 0xc3, 0xe5, 0x3b, 0x8f,
  0x1f, 0x01, 0xd6, 0x46, 0x15, 0x05, 0x11, 0xb1, 0x93, 0x13, 0x11, 0x7e,
  0x71, 0xdb, 0x16, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04,
  0x30, 0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f,
  0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0x40, 0x18, 0x30, 0x80,
  0x42, 0xfc, 0x0c, 0xb5, 0x4c, 0x88, 0x24, 0x00, 0x0b, 0xf1, 0x53, 0x4f,
  0x44, 0x48, 0xbf, 0x04, 0x30, 0xcf, 0x42, 0xfc, 0x46, 0x84, 0x0c, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x13, 0x04, 0x46, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x34, 0xca, 0x52, 0xa0,
  0xec, 0xca, 0xa6, 0xe4, 0x4a, 0x37, 0xa0, 0x30, 0x05, 0xca, 0x80, 0x50,
  0x11, 0x94, 0x00, 0x99, 0x11, 0x80, 0x31, 0x02, 0x10, 0x04, 0x41, 0xf8,
  0x1b, 0x23, 0x00, 0x41, 0x10, 0x04, 0xc1, 0x60, 0x8c, 0x00, 0x04, 0x41,
  0x10, 0xff, 0x85, 0x19, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x50, 0x69, 0x8b, 0x91, 0x65, 0xd2, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x54, 0x1b, 0x73, 0x5c, 0xd7, 0x34, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x15, 0xd7, 0x24, 0x18, 0x46, 0x8d, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x01, 0x21, 0x06, 0x4d, 0x36, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0xc4, 0x18, 0x38, 0xdd, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x48, 0x60,
  0x20, 0x0d, 0xdb, 0x68, 0x42, 0x10, 0x0c, 0x37, 0x10, 0xc1, 0x19, 0x8c,
  0x26, 0x0c, 0xc2, 0x70, 0x43, 0x11, 0x9c, 0x41, 0x0d, 0xc1, 0xce, 0x32,
  0x14, 0x41, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x4b, 0x1a, 0x64,
  0x4a, 0x18, 0x84, 0x41, 0xf4, 0x8d, 0x26, 0x04, 0xc0, 0x88, 0x81, 0x02,
  0x80, 0x20, 0x18, 0x2c, 0x6b, 0xb0, 0x31, 0x66, 0x30, 0x06, 0x53, 0x18,
  0x8c, 0x26, 0x04, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x2c, 0x6d,
  0xd0, 0x39, 0x67, 0x50, 0x06, 0xd5, 0x18, 0x8c, 0x26, 0x04, 0xc0, 0x88,
  0x81, 0x02, 0x80, 0x20, 0x18, 0x2c, 0x6f, 0xf0, 0x41, 0xd9, 0x19, 0x5c,
  0x65, 0x30, 0x9a, 0x10, 0x00, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0xb0,
  0xc4, 0x41, 0x18, 0x48, 0x67, 0x90, 0x06, 0xd9, 0x19, 0x8c, 0x26, 0x04,
  0x80, 0x05, 0x83, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xe0, 0x91,
  0x03, 0x31, 0x08, 0x6c, 0x38, 0xe4, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x0f, 0x1d, 0x90, 0x41, 0x60, 0x4d, 0x41, 0x9f, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x78, 0xec, 0xc0, 0x0c, 0x82, 0xe1, 0x88, 0x00, 0x0c,
  0x84, 0xcf, 0x04, 0x0f, 0x3e, 0xd3, 0x0d, 0xc1, 0x20, 0x18, 0xa4, 0xd0,
  0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9e, 0x3d, 0x58, 0x83, 0x60,
  0x38, 0x22, 0x28, 0x03, 0xe1, 0x33, 0x61, 0x0c, 0xe0, 0x33, 0xdd, 0x10,
  0x0c, 0xc2, 0x81, 0x81, 0x31, 0x0b, 0xd0, 0x00, 0x3e, 0x16, 0x64, 0xf0,
  0x31, 0xcb, 0xa1, 0x8f, 0x05, 0x82, 0x7c, 0x2c, 0x58, 0xe2, 0x73, 0x63,
  0x60, 0xcc, 0x84, 0x80, 0x3e, 0x77, 0x06, 0xc6, 0x2c, 0x80, 0x03, 0xf8,
  0x58, 0xf0, 0xc1, 0xc7, 0x38, 0x8c, 0x3e, 0x16, 0x08, 0xf2, 0xb1, 0xc0,
  0x89, 0xcf, 0xa5, 0x81, 0x31, 0x13, 0x02, 0xfa, 0x58, 0x62, 0x07, 0xf2,
  0xb1, 0xc0, 0x0e, 0xe0, 0x63, 0x03, 0x1e, 0xc8, 0xc7, 0x02, 0x3c, 0x80,
  0xcf, 0x68, 0x82, 0x1c, 0x00, 0xc3, 0x0d, 0x81, 0x2b, 0x98, 0xc1, 0x2c,
  0x83, 0x50, 0x04, 0xb3, 0x04, 0xc3, 0x40, 0xc5, 0x90, 0x06, 0x83, 0x4f,
  0x08, 0x15, 0xcc, 0xc2, 0x8d, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x64,
  0x0b, 0xa8, 0x90, 0x07, 0xb1, 0x30, 0x9a, 0x10, 0x04, 0x36, 0x04, 0x22,
  0x18, 0x4d, 0x18, 0x04, 0x13, 0x02, 0x11, 0x18, 0xc1, 0x07, 0x22, 0x28,
  0xc1, 0x0f, 0xa0, 0x02, 0x01, 0x46, 0x0c, 0x1c, 0x00, 0x04, 0xc1, 0xa0,
  0x01, 0x07, 0x56, 0x18, 0x85, 0x20, 0x17, 0x1e, 0x52, 0x20, 0x05, 0x52,
  0x48, 0x85, 0x5b, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xc9, 0x17,
  0x60, 0x21, 0x14, 0x72, 0x61, 0x34, 0x21, 0x08, 0x6c, 0x09, 0x44, 0x30,
  0x9a, 0x30, 0x08, 0x26, 0x04, 0x22, 0x30, 0x81, 0x10, 0x81, 0x15, 0xa5,
  0x20, 0x82, 0x1a, 0x4e, 0x01, 0x2a, 0x18, 0xa0, 0x82, 0x01, 0x46, 0x0c,
  0x1c, 0x00, 0x04, 0xc1, 0xa0, 0x51, 0x07, 0x5b, 0x68, 0x85, 0x60, 0x1c,
  0x2e, 0x57, 0x70, 0x05, 0x57, 0x98, 0x85, 0x70, 0x30, 0xca, 0x1c, 0x60,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x52, 0x3a, 0xec, 0x02, 0x2b,
  0x90, 0xc3, 0x68, 0x42, 0x00, 0x0c, 0x37, 0x0c, 0x01, 0x1a, 0xcc, 0x32,
  0x0c, 0x44, 0x30, 0x4b, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
