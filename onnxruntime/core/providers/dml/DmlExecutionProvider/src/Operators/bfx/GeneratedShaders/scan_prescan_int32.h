#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 2adc22743bd79ea32a25f275b31b846c
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;                                       UAV  struct         r/w      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.RWStructuredBuffer<int>" = type { i32 }
%Constants = type { i32 }

@"\01?s_out@@3PAHA" = external addrspace(3) global [1055 x i32], align 4

define void @scan_prescan() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %6 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %7 = shl nsw i32 %6, 9
  %8 = sub i32 %5, %7
  %9 = add nsw i32 %8, 512
  %10 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %8
  store i32 0, i32 addrspace(3)* %10, align 4, !tbaa !15
  %11 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %9
  store i32 0, i32 addrspace(3)* %11, align 4, !tbaa !15
  %12 = add nsw i32 %8, 1024
  %13 = icmp slt i32 %12, 1055
  br i1 %13, label %14, label %16

; <label>:14                                      ; preds = %0
  %15 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %12
  store i32 0, i32 addrspace(3)* %15, align 4, !tbaa !15
  br label %16

; <label>:16                                      ; preds = %14, %0
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %17 = shl nsw i32 %6, 10
  %18 = add nsw i32 %8, %17
  %19 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.i32 %19, 0
  %21 = icmp ult i32 %18, %20
  br i1 %21, label %22, label %38

; <label>:22                                      ; preds = %16
  %23 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2, i32 %18, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %24 = extractvalue %dx.types.ResRet.i32 %23, 0
  %25 = ashr i32 %8, 5
  %26 = add nsw i32 %25, %8
  %27 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %26
  store i32 %24, i32 addrspace(3)* %27, align 4, !tbaa !15
  %28 = add i32 %18, 512
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = icmp ult i32 %28, %30
  br i1 %31, label %32, label %38

; <label>:32                                      ; preds = %22
  %33 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2, i32 %28, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %34 = extractvalue %dx.types.ResRet.i32 %33, 0
  %35 = ashr i32 %9, 5
  %36 = add nsw i32 %35, %9
  %37 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %36
  store i32 %34, i32 addrspace(3)* %37, align 4, !tbaa !15
  br label %38

; <label>:38                                      ; preds = %32, %22, %16
  br label %39

; <label>:39                                      ; preds = %60, %38
  %40 = phi i32 [ %61, %60 ], [ 1, %38 ]
  %41 = phi i32 [ %62, %60 ], [ 512, %38 ]
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %42 = icmp slt i32 %8, %41
  br i1 %42, label %43, label %60

; <label>:43                                      ; preds = %39
  %44 = shl i32 %8, 1
  %45 = or i32 %44, 1
  %46 = mul nsw i32 %40, %45
  %47 = add nsw i32 %46, -1
  %48 = add nsw i32 %44, 2
  %49 = mul nsw i32 %40, %48
  %50 = add nsw i32 %49, -1
  %51 = ashr i32 %47, 5
  %52 = add nsw i32 %51, %47
  %53 = ashr i32 %50, 5
  %54 = add nsw i32 %53, %50
  %55 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %52
  %56 = load i32, i32 addrspace(3)* %55, align 4, !tbaa !15
  %57 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %54
  %58 = load i32, i32 addrspace(3)* %57, align 4, !tbaa !15
  %59 = add nsw i32 %58, %56
  store i32 %59, i32 addrspace(3)* %57, align 4, !tbaa !15
  br label %60

; <label>:60                                      ; preds = %43, %39
  %61 = shl i32 %40, 1
  %62 = ashr i32 %41, 1
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %39, label %64

; <label>:64                                      ; preds = %60
  %65 = icmp eq i32 %5, %7
  br i1 %65, label %66, label %68

; <label>:66                                      ; preds = %64
  %67 = load i32, i32 addrspace(3)* getelementptr inbounds ([1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 1054), align 4, !tbaa !15
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1, i32 %6, i32 0, i32 %67, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  store i32 0, i32 addrspace(3)* getelementptr inbounds ([1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 1054), align 4, !tbaa !15
  br label %68

; <label>:68                                      ; preds = %66, %64
  br label %69

; <label>:69                                      ; preds = %92, %68
  %70 = phi i32 [ %72, %92 ], [ 1024, %68 ]
  %71 = phi i32 [ %93, %92 ], [ 1, %68 ]
  %72 = ashr i32 %70, 1
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %73 = icmp slt i32 %8, %71
  br i1 %73, label %74, label %92

; <label>:74                                      ; preds = %69
  %75 = shl i32 %8, 1
  %76 = or i32 %75, 1
  %77 = mul nsw i32 %72, %76
  %78 = add nsw i32 %77, -1
  %79 = add nsw i32 %75, 2
  %80 = mul nsw i32 %72, %79
  %81 = add nsw i32 %80, -1
  %82 = ashr i32 %78, 5
  %83 = add nsw i32 %82, %78
  %84 = ashr i32 %81, 5
  %85 = add nsw i32 %84, %81
  %86 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %83
  %87 = load i32, i32 addrspace(3)* %86, align 4, !tbaa !15
  %88 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %85
  %89 = load i32, i32 addrspace(3)* %88, align 4, !tbaa !15
  store i32 %89, i32 addrspace(3)* %86, align 4, !tbaa !15
  %90 = load i32, i32 addrspace(3)* %88, align 4, !tbaa !15
  %91 = add nsw i32 %90, %87
  store i32 %91, i32 addrspace(3)* %88, align 4, !tbaa !15
  br label %92

; <label>:92                                      ; preds = %74, %69
  %93 = shl i32 %71, 1
  %94 = icmp slt i32 %93, 1024
  br i1 %94, label %69, label %95

; <label>:95                                      ; preds = %92
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %96 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.i32 %96, 0
  %98 = icmp ult i32 %18, %97
  br i1 %98, label %99, label %113

; <label>:99                                      ; preds = %95
  %100 = ashr i32 %8, 5
  %101 = add nsw i32 %100, %8
  %102 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %101
  %103 = load i32, i32 addrspace(3)* %102, align 4, !tbaa !15
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %3, i32 %18, i32 0, i32 %103, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %104 = add i32 %18, 512
  %105 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.i32 %105, 0
  %107 = icmp ult i32 %104, %106
  br i1 %107, label %108, label %113

; <label>:108                                     ; preds = %99
  %109 = ashr i32 %9, 5
  %110 = add nsw i32 %109, %9
  %111 = getelementptr [1055 x i32], [1055 x i32] addrspace(3)* @"\01?s_out@@3PAHA", i32 0, i32 %110
  %112 = load i32, i32 addrspace(3)* %111, align 4, !tbaa !15
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %3, i32 %104, i32 0, i32 %112, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %113

; <label>:113                                     ; preds = %108, %99, %95
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !10, null}
!5 = !{!6, !8, !9}
!6 = !{i32 0, %"class.RWStructuredBuffer<int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!7 = !{i32 1, i32 4}
!8 = !{i32 1, %"class.RWStructuredBuffer<int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!9 = !{i32 2, %"class.RWStructuredBuffer<int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !7}
!10 = !{!11}
!11 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 4, null}
!12 = !{void ()* @scan_prescan, !"scan_prescan", null, !4, !13}
!13 = !{i32 0, i64 16, i32 4, !14}
!14 = !{i32 512, i32 1, i32 1}
!15 = !{!16, !16, i64 0}
!16 = !{!"int", !17, i64 0}
!17 = !{!"omnipotent char", !18, i64 0}
!18 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_scan_prescan[] = {
  0x44, 0x58, 0x42, 0x43, 0xb9, 0x48, 0x55, 0x6a, 0xb2, 0x37, 0x9b, 0x71,
  0x3f, 0x46, 0xc5, 0xb0, 0x4c, 0x5b, 0x76, 0xe5, 0x01, 0x00, 0x00, 0x00,
  0xf8, 0x0a, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xa8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2a, 0xdc, 0x22, 0x74, 0x3b, 0xd7, 0x9e, 0xa3,
  0x2a, 0x25, 0xf2, 0x75, 0xb3, 0x1b, 0x84, 0x6c, 0x44, 0x58, 0x49, 0x4c,
  0xbc, 0x09, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0x6f, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xa4, 0x09, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x66, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0xc0,
  0x00, 0xd2, 0x06, 0x63, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x80,
  0x6a, 0x03, 0x41, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x00, 0x48, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x80, 0xc1, 0x1c,
  0x01, 0x18, 0xe4, 0x27, 0x02, 0x30, 0x88, 0x10, 0x0c, 0x23, 0x00, 0x25,
  0x18, 0x88, 0x28, 0x03, 0x00, 0x00, 0x64, 0x94, 0x61, 0x00, 0x00, 0x42,
  0x6e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0x57, 0x42, 0x5a, 0x89,
  0xc9, 0x47, 0x6e, 0x1b, 0x15, 0x00, 0x00, 0x00, 0xc0, 0x1c, 0x01, 0x42,
  0xcb, 0x3d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3,
  0x42, 0xa0, 0x80, 0x29, 0x87, 0x02, 0x34, 0x00, 0xb0, 0x00, 0xe4, 0x94,
  0x65, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x82, 0x8e, 0x1a,
  0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0xb9, 0x8d, 0x2a, 0x56, 0x62, 0xf2,
  0x91, 0xdb, 0x46, 0x04, 0x00, 0x00, 0x40, 0x21, 0x24, 0xa0, 0x01, 0x68,
  0x9a, 0x23, 0x08, 0x8a, 0xd1, 0x00, 0x0b, 0x00, 0x54, 0x64, 0x0d, 0x04,
  0xcc, 0xd4, 0x8d, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc, 0x83, 0x1b, 0xc8,
  0xc2, 0x2d, 0xcc, 0x02, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xd4,
  0x83, 0x3c, 0x94, 0x03, 0x39, 0x88, 0x42, 0x3d, 0x98, 0x83, 0x39, 0x94,
  0x83, 0x3c, 0xf0, 0x41, 0x3a, 0xb8, 0x03, 0x3d, 0xf8, 0x01, 0x0a, 0x00,
  0xca, 0x2e, 0xe1, 0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92, 0x50, 0x00, 0xd0,
  0x36, 0x47, 0x00, 0x0a, 0x83, 0x08, 0xc0, 0x30, 0x05, 0x00, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f, 0x24, 0x90, 0x21, 0x23,
  0x45, 0x44, 0x00, 0x76, 0x00, 0xf0, 0x90, 0x87, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x01, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x03, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x08,
  0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x1c, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x40, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x99, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x63, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x02, 0x4a, 0xa0, 0x08, 0x8a, 0x61, 0x04, 0xa0, 0x30,
  0x0a, 0xa1, 0x00, 0x11, 0xa8, 0x1a, 0x01, 0xa0, 0x6e, 0x04, 0xa0, 0x40,
  0x88, 0x9b, 0x01, 0x20, 0x6d, 0x06, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x57, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44,
  0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b,
  0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81,
  0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04,
  0x20, 0x99, 0x20, 0x00, 0xca, 0x06, 0x61, 0x20, 0x26, 0x08, 0xc0, 0xb2,
  0x41, 0x18, 0x0c, 0x0a, 0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08,
  0x00, 0x33, 0x41, 0xd0, 0x28, 0x02, 0x13, 0x04, 0xa0, 0x99, 0x20, 0x54,
  0xd0, 0x04, 0x01, 0x70, 0x36, 0x08, 0xc3, 0xb3, 0x61, 0x51, 0x16, 0x46,
  0x51, 0x86, 0xc6, 0x71, 0x1c, 0x68, 0xc3, 0x32, 0x2c, 0x8c, 0x32, 0x0c,
  0x8d, 0xe3, 0x38, 0xd0, 0x86, 0x85, 0x58, 0x18, 0x85, 0x18, 0x1a, 0xc7,
  0x71, 0xa0, 0x0d, 0x43, 0x24, 0x4d, 0x13, 0x04, 0x6e, 0xda, 0x80, 0x28,
  0x15, 0xa3, 0x28, 0xc3, 0x03, 0x6c, 0x08, 0xac, 0x0d, 0x04, 0x40, 0x5d,
  0xc0, 0x04, 0xa1, 0x08, 0xc8, 0xcc, 0x8d, 0x85, 0xb9, 0x7d, 0xc1, 0xc9,
  0x95, 0xcd, 0x8d, 0x85, 0xb9, 0x4d, 0x10, 0x3a, 0x69, 0x82, 0x00, 0x3c,
  0x1b, 0x06, 0x6e, 0x18, 0x36, 0x10, 0xca, 0xf6, 0x74, 0x1b, 0x8a, 0x4c,
  0x03, 0x30, 0x8f, 0x43, 0x9a, 0x1b, 0x1d, 0x9f, 0xb7, 0x36, 0xb7, 0x34,
  0xb8, 0x37, 0xba, 0x32, 0x37, 0x3a, 0x90, 0x31, 0xb4, 0x30, 0x39, 0x46,
  0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x43, 0x2f, 0x43, 0x2b, 0x2b,
  0x20, 0x54, 0x42, 0x41, 0x41, 0x1b, 0x02, 0x31, 0x98, 0x20, 0x74, 0xd1,
  0x86, 0x21, 0x0c, 0xc6, 0x80, 0x0c, 0x36, 0x0c, 0x60, 0x50, 0x06, 0x64,
  0xb0, 0x61, 0x30, 0x03, 0x33, 0x20, 0x83, 0x2a, 0x6c, 0x6c, 0x76, 0x6d,
  0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0, 0x0a, 0x19, 0x9e,
  0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0x80, 0x68, 0x42,
  0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x30, 0xea,
  0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd, 0x91,
  0x95, 0xb1, 0x4d, 0x09, 0x90, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65, 0x73,
  0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x82, 0xab, 0x0e, 0x19, 0x9e,
  0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd, 0xdc,
  0x94, 0xc0, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x05, 0xe0, 0x04, 0x7e,
  0xf3, 0xef, 0xbb, 0x4e, 0x07, 0x02, 0x67, 0xd0, 0x20, 0x32, 0x68, 0x04,
  0xcd, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x40, 0x14, 0x21, 0x44, 0x64, 0x07,
  0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a,
  0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb, 0x86, 0x20, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c,
  0x84, 0x0d, 0x44, 0xc3, 0xe5, 0x3b, 0x8f, 0x6f, 0x44, 0x0e, 0xf5, 0x88,
  0x83, 0x8f, 0xdc, 0xb6, 0x15, 0x5c, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x01,
  0xd6, 0x46, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0xf8, 0xc8, 0x6d, 0x9b,
  0x01, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10,
  0x11, 0x3b, 0x39, 0x11, 0xe1, 0x23, 0xb7, 0x6d, 0x02, 0xd2, 0x70, 0xf9,
  0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83, 0x38, 0xf8, 0xc8, 0x6d, 0x5b,
  0x00, 0x23, 0x09, 0x40, 0xf3, 0x3f, 0x11, 0x21, 0x09, 0x40, 0x03, 0x00,
  0x61, 0x20, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x13, 0x04, 0x53, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x94,
  0x42, 0x49, 0x94, 0x5c, 0x81, 0x06, 0x94, 0x5d, 0x0d, 0x14, 0x20, 0x44,
  0x61, 0x0a, 0x94, 0xa5, 0x40, 0xe9, 0x06, 0x14, 0x6f, 0x40, 0xf9, 0x42,
  0x14, 0x45, 0xf1, 0x42, 0xd0, 0x52, 0x02, 0x45, 0x40, 0xde, 0x50, 0x47,
  0x20, 0x00, 0x00, 0x03, 0x8c, 0x01, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0x7d, 0xcf, 0xd0, 0x75, 0xd7, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x58, 0x60, 0x00, 0x11, 0xdf, 0x87, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x15, 0x06, 0x51, 0xd1, 0x75, 0xd9, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x58, 0x62, 0x20, 0x15, 0x9e, 0xa7, 0x8d, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x81, 0x91, 0x06, 0xcc, 0x37, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x46, 0x1a, 0x30, 0x60, 0x60, 0x81, 0x75, 0x82, 0x1a, 0x82,
  0xb0, 0x00, 0x0c, 0x40, 0xb0, 0x82, 0x01, 0x0e, 0xc8, 0x40, 0x18, 0x36,
  0x20, 0x82, 0x32, 0x18, 0x80, 0x15, 0x0c, 0x71, 0x50, 0x06, 0xc2, 0xb0,
  0x01, 0x11, 0x98, 0xc1, 0x00, 0x18, 0x61, 0x81, 0x60, 0xb8, 0x21, 0x90,
  0xd0, 0x60, 0x96, 0x21, 0x10, 0x82, 0x15, 0x0c, 0x74, 0x80, 0x06, 0xc2,
  0xb0, 0x01, 0x11, 0xa4, 0xc1, 0x00, 0xcc, 0x12, 0x08, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0x80, 0xc4, 0x01, 0xe7, 0x59, 0x32, 0x9d, 0xc0, 0x90,
  0x00, 0x04, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xc1, 0x41, 0xd7,
  0xac, 0xc1, 0x68, 0x42, 0x00, 0x0c, 0x37, 0x0c, 0x01, 0x19, 0xcc, 0x32,
  0x0c, 0x45, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x4e, 0x1d, 0x70,
  0x12, 0xe1, 0x06, 0x16, 0x1b, 0x8c, 0x26, 0x04, 0x40, 0x39, 0x66, 0x90,
  0x16, 0x3c, 0x20, 0x58, 0xc1, 0xe0, 0x07, 0x72, 0x10, 0x0c, 0x1b, 0x10,
  0x01, 0x31, 0x00, 0x95, 0xc0, 0x01, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0xc1, 0x94, 0x07, 0x66, 0x60, 0xd1, 0xc1, 0x68, 0x42, 0x00, 0x0c, 0x37,
  0x0c, 0x01, 0x19, 0xcc, 0x32, 0x10, 0x45, 0x30, 0x62, 0xa0, 0x00, 0x20,
  0x08, 0x06, 0x8e, 0x1f, 0x94, 0xc1, 0x46, 0xdc, 0xc1, 0x57, 0x07, 0xa3,
  0x09, 0x01, 0x50, 0xd6, 0x1b, 0xa4, 0x05, 0x17, 0x08, 0x56, 0x30, 0x9c,
  0xc2, 0x1e, 0x04, 0xc3, 0x06, 0x44, 0x40, 0x0c, 0xc0, 0x2c, 0x41, 0x31,
  0x4b, 0x60, 0x0c, 0x54, 0x00, 0x67, 0x80, 0xf8, 0x43, 0x31, 0x50, 0x01,
  0x9c, 0x01, 0x42, 0x0f, 0xc5, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x20,
  0xa6, 0x10, 0x07, 0x73, 0x30, 0xdc, 0xc0, 0x05, 0x68, 0x30, 0xcb, 0x70,
  0x20, 0x41, 0x75, 0xa2, 0x70, 0x15, 0x8c, 0xc2, 0x5a, 0x11, 0x88, 0xc0,
  0x82, 0x39, 0x00, 0x81, 0x11, 0xa5, 0x00, 0x02, 0x43, 0x02, 0x11, 0x58,
  0x60, 0x07, 0x20, 0x28, 0x82, 0x0f, 0xd2, 0x82, 0x02, 0x04, 0x35, 0xf8,
  0x41, 0x5a, 0x40, 0x80, 0x60, 0x05, 0x83, 0x2d, 0xa8, 0xc2, 0x40, 0x01,
  0x30, 0x56, 0x30, 0xe0, 0x02, 0x2b, 0x0c, 0x14, 0x00, 0xc3, 0x82, 0x01,
  0x04, 0xc3, 0x06, 0xc4, 0x10, 0x0c, 0xc0, 0x2c, 0x01, 0x52, 0x93, 0x2c,
  0x5c, 0x4d, 0xb3, 0x90, 0xc3, 0x0d, 0x41, 0x2c, 0x98, 0xc1, 0x2c, 0x83,
  0x91, 0x04, 0xc3, 0x0d, 0x73, 0x10, 0x07, 0x60, 0x30, 0xcb, 0xa0, 0x2c,
  0x01, 0xe5, 0x01, 0x30, 0x46, 0x0c, 0x1c, 0x00, 0x04, 0xc1, 0x00, 0xd2,
  0x85, 0x51, 0xc8, 0x03, 0x3a, 0xa0, 0x85, 0x60, 0x15, 0x56, 0x61, 0x15,
  0xf8, 0x40, 0x16, 0x86, 0x0d, 0x08, 0x3d, 0xa0, 0x85, 0x01, 0x98, 0x25,
  0x58, 0x66, 0x09, 0x98, 0x81, 0x0a, 0xa0, 0x70, 0x50, 0x62, 0x19, 0xa8,
  0x00, 0xd2, 0xc0, 0x81, 0x8b, 0xa5, 0x84, 0x5c, 0xc8, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x40, 0x7e, 0x41, 0x15, 0x58, 0x61, 0xb8, 0xa1, 0x0e,
  0x04, 0x34, 0x98, 0x65, 0x68, 0x9c, 0xa0, 0xec, 0x60, 0x17, 0xae, 0x02,
  0x5e, 0x58, 0x23, 0x02, 0x11, 0x58, 0xc0, 0x0a, 0x20, 0x30, 0xc2, 0x17,
  0x40, 0x60, 0x47, 0x20, 0x02, 0x0b, 0x5e, 0x01, 0x04, 0x45, 0xd4, 0x42,
  0x5a, 0x50, 0x80, 0xa0, 0x86, 0x5b, 0x48, 0x0b, 0x08, 0x10, 0xac, 0x60,
  0x78, 0x87, 0x71, 0x18, 0x28, 0x00, 0xc6, 0x0a, 0x86, 0x78, 0x28, 0x87,
  0x81, 0x02, 0x60, 0x0c, 0x1b, 0x10, 0x44, 0x30, 0x00, 0x24, 0x00, 0xc3,
  0x02, 0x02, 0x04, 0xc3, 0x06, 0x04, 0x11, 0x0c, 0xc0, 0x2c, 0x81, 0x53,
  0x14, 0x3b, 0xdc, 0x70, 0x43, 0xa0, 0x0b, 0x68, 0x30, 0xcb, 0xc0, 0x3c,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x20, 0xf3, 0xe0, 0x0b, 0xe0,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x13, 0x3c, 0xf4, 0x42, 0x2b,
  0xac, 0xc3, 0x68, 0x42, 0x00, 0x0c, 0x37, 0x8c, 0x42, 0x40, 0x06, 0xb3,
  0x0c, 0x90, 0x14, 0x14, 0x2b, 0x90, 0x43, 0x5a, 0xd0, 0x0a, 0x20, 0x58,
  0xc1, 0xc0, 0x0f, 0xf0, 0x10, 0x50, 0x00, 0x8c, 0x11, 0x03, 0x07, 0x00,
  0x41, 0x30, 0x80, 0xf0, 0x21, 0x1c, 0x6a, 0x01, 0x15, 0xe4, 0x21, 0x48,
  0x87, 0x74, 0x48, 0x07, 0x5d, 0x80, 0x87, 0x42, 0x85, 0x77, 0x80, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x98, 0xf0, 0xa1, 0x1c, 0x6a, 0x61, 0x1e,
  0x46, 0x13, 0x02, 0x60, 0xb8, 0x61, 0x08, 0xc8, 0x60, 0x96, 0x21, 0x92,
  0x82, 0x9a, 0x05, 0x76, 0x48, 0x0b, 0x68, 0x01, 0x04, 0x2b, 0x18, 0x48,
  0x02, 0x1f, 0x02, 0x0a, 0x80, 0x31, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06,
  0x10, 0x48, 0xa4, 0x43, 0x2f, 0x20, 0xfa, 0x10, 0xc4, 0x43, 0x3c, 0xc4,
  0x83, 0x38, 0xe0, 0xc3, 0x2c, 0x81, 0x84, 0x01, 0x31, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x25, 0x30, 0x83, 0x2d, 0x03, 0x13,
  0x98, 0xc1, 0x96, 0x21, 0x0a, 0xcc, 0x60, 0xcb, 0xf0, 0x05, 0x66, 0xb0,
  0x65, 0x50, 0x83, 0xc0, 0x0c, 0xb6, 0x0c, 0x7e, 0x10, 0x98, 0xc1, 0x96,
  0x01, 0x14, 0x02, 0x33, 0xd8, 0x32, 0x88, 0x42, 0x60, 0x06, 0x5b, 0x06,
  0x55, 0x08, 0xcc, 0x60, 0xcb, 0xc0, 0x0a, 0x81, 0x19, 0x6c, 0x19, 0xc2,
  0x21, 0x30, 0x83, 0x2d, 0xc3, 0x38, 0x04, 0x66, 0xb0, 0x65, 0x20, 0x87,
  0xc0, 0x0c, 0xb6, 0x0c, 0xe5, 0x10, 0x98, 0xc1, 0x96, 0xe1, 0x1c, 0x02,
  0x33, 0xd8, 0x32, 0xd0, 0x43, 0x60, 0x06, 0x5b, 0x06, 0x7f, 0x08, 0xcc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
