#if 0
;
; Note: shader requires additional functionality:
;       Use native low precision
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: a3dc53ce218a8ede34d8580f22681fbd
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [68 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;                                       UAV  struct         r/w      U2             u2     1
;                                       UAV  struct         r/w      U3             u3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f16 = type { half, half, half, half, i32 }
%"class.RWStructuredBuffer<half>" = type { half }
%Constants = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

define void @deform_conv2d_im2cols() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %9 = icmp slt i32 %6, %8
  br i1 %9, label %10, label %229

; <label>:10                                      ; preds = %0
  %11 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.i32 %11, 2
  %13 = srem i32 %6, %12
  %14 = sdiv i32 %6, %12
  %15 = extractvalue %dx.types.CBufRet.i32 %11, 1
  %16 = srem i32 %14, %15
  %17 = mul nsw i32 %15, %12
  %18 = sdiv i32 %6, %17
  %19 = extractvalue %dx.types.CBufRet.i32 %7, 1
  %20 = srem i32 %18, %19
  %21 = mul nsw i32 %17, %19
  %22 = sdiv i32 %6, %21
  %23 = extractvalue %dx.types.CBufRet.i32 %7, 2
  %24 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.i32 %24, 3
  %26 = sdiv i32 %23, %25
  %27 = sdiv i32 %22, %26
  %28 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %29 = extractvalue %dx.types.CBufRet.i32 %11, 0
  %30 = mul i32 %23, %20
  %31 = add i32 %22, %30
  %32 = mul i32 %28, %31
  %33 = mul i32 %32, %29
  %34 = mul nsw i32 %25, %20
  %35 = add nsw i32 %34, %27
  %36 = extractvalue %dx.types.CBufRet.i32 %11, 3
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = shl i32 %36, 1
  %40 = mul i32 %39, %35
  %41 = mul i32 %40, %38
  %42 = mul i32 %41, %15
  %43 = mul i32 %42, %12
  %44 = mul nsw i32 %35, %36
  %45 = mul nsw i32 %44, %38
  %46 = mul nsw i32 %45, %15
  %47 = mul nsw i32 %46, %12
  %48 = icmp sgt i32 %36, 0
  br i1 %48, label %49, label %229

; <label>:49                                      ; preds = %10
  %50 = mul i32 %36, %22
  %51 = mul i32 %50, %38
  %52 = mul i32 %51, %19
  %53 = mul i32 %52, %15
  %54 = mul i32 %53, %12
  %55 = add i32 %54, %13
  %56 = mul i32 %15, %20
  %57 = mul i32 %56, %12
  %58 = add i32 %55, %57
  %59 = mul nsw i32 %12, %16
  %60 = add i32 %58, %59
  br label %61

; <label>:61                                      ; preds = %222, %49
  %62 = phi i32 [ %223, %222 ], [ %60, %49 ]
  %63 = phi i32 [ %224, %222 ], [ 0, %49 ]
  %64 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.i32 %64, 0
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %222

; <label>:67                                      ; preds = %61
  br label %68

; <label>:68                                      ; preds = %206, %67
  %69 = phi i32 [ %216, %206 ], [ %62, %67 ]
  %70 = phi i32 [ %217, %206 ], [ 0, %67 ]
  %71 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.i32 %71, 0
  %73 = mul nsw i32 %72, %63
  %74 = add nsw i32 %73, %70
  %75 = shl nsw i32 %74, 1
  %76 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.i32 %76, 0
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %91, label %79

; <label>:79                                      ; preds = %68
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 1
  %82 = extractvalue %dx.types.CBufRet.i32 %80, 2
  %83 = mul i32 %81, %74
  %84 = mul i32 %83, %82
  %85 = mul nsw i32 %82, %16
  %86 = add i32 %47, %13
  %87 = add i32 %86, %85
  %88 = add i32 %87, %84
  %89 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %2, i32 %88, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %90 = extractvalue %dx.types.ResRet.f16 %89, 0
  br label %91

; <label>:91                                      ; preds = %79, %68
  %92 = phi half [ %90, %79 ], [ 0xH3C00, %68 ]
  %93 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.i32 %93, 1
  %95 = extractvalue %dx.types.CBufRet.i32 %93, 2
  %96 = mul i32 %94, %75
  %97 = mul i32 %96, %95
  %98 = mul nsw i32 %95, %16
  %99 = add i32 %43, %13
  %100 = add i32 %99, %98
  %101 = add i32 %100, %97
  %102 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %101, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %103 = extractvalue %dx.types.ResRet.f16 %102, 0
  %104 = or i32 %75, 1
  %105 = mul i32 %94, %104
  %106 = mul i32 %105, %95
  %107 = add i32 %100, %106
  %108 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %107, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %109 = extractvalue %dx.types.ResRet.f16 %108, 0
  %110 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.i32 %110, 1
  %112 = mul nsw i32 %111, %16
  %113 = extractvalue %dx.types.CBufRet.i32 %71, 1
  %114 = sub i32 %112, %113
  %115 = extractvalue %dx.types.CBufRet.i32 %71, 3
  %116 = mul nsw i32 %115, %63
  %117 = add nsw i32 %114, %116
  %118 = sitofp i32 %117 to half
  %119 = fadd fast half %118, %103
  %120 = extractvalue %dx.types.CBufRet.i32 %110, 2
  %121 = mul nsw i32 %120, %13
  %122 = extractvalue %dx.types.CBufRet.i32 %71, 2
  %123 = sub i32 %121, %122
  %124 = extractvalue %dx.types.CBufRet.i32 %110, 0
  %125 = mul nsw i32 %124, %70
  %126 = add nsw i32 %123, %125
  %127 = sitofp i32 %126 to half
  %128 = fadd fast half %127, %109
  %129 = extractvalue %dx.types.CBufRet.i32 %93, 0
  %130 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.i32 %130, 3
  %132 = fcmp fast ole half %119, 0xHBC00
  %133 = sitofp i32 %131 to half
  %134 = fcmp fast ole half %133, %119
  %135 = or i1 %132, %134
  %136 = fcmp fast ole half %128, 0xHBC00
  %137 = or i1 %135, %136
  %138 = sitofp i32 %129 to half
  %139 = fcmp fast ole half %138, %128
  %140 = or i1 %139, %137
  br i1 %140, label %206, label %141

; <label>:141                                     ; preds = %91
  %142 = call half @dx.op.unary.f16(i32 27, half %119)  ; Round_ni(value)
  %143 = fptosi half %142 to i32
  %144 = call half @dx.op.unary.f16(i32 27, half %128)  ; Round_ni(value)
  %145 = fptosi half %144 to i32
  %146 = add nsw i32 %143, 1
  %147 = add nsw i32 %145, 1
  %148 = sitofp i32 %143 to half
  %149 = fsub fast half %119, %148
  %150 = sitofp i32 %145 to half
  %151 = fsub fast half %128, %150
  %152 = fsub fast half 0xH3C00, %149
  %153 = fsub fast half 0xH3C00, %151
  %154 = or i32 %145, %143
  %155 = icmp sgt i32 %154, -1
  br i1 %155, label %156, label %162

; <label>:156                                     ; preds = %141
  %157 = mul nsw i32 %143, %129
  %158 = add i32 %145, %33
  %159 = add i32 %158, %157
  %160 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %4, i32 %159, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %161 = extractvalue %dx.types.ResRet.f16 %160, 0
  br label %162

; <label>:162                                     ; preds = %156, %141
  %163 = phi half [ %161, %156 ], [ 0xH0000, %141 ]
  %164 = icmp sgt i32 %143, -1
  %165 = add nsw i32 %129, -1
  %166 = icmp slt i32 %145, %165
  %167 = and i1 %164, %166
  br i1 %167, label %168, label %174

; <label>:168                                     ; preds = %162
  %169 = mul nsw i32 %143, %129
  %170 = add i32 %169, %33
  %171 = add i32 %170, %147
  %172 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %4, i32 %171, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %173 = extractvalue %dx.types.ResRet.f16 %172, 0
  br label %174

; <label>:174                                     ; preds = %168, %162
  %175 = phi half [ %173, %168 ], [ 0xH0000, %162 ]
  %176 = add nsw i32 %131, -1
  %177 = icmp slt i32 %143, %176
  %178 = icmp sgt i32 %145, -1
  %179 = and i1 %177, %178
  br i1 %179, label %180, label %186

; <label>:180                                     ; preds = %174
  %181 = mul nsw i32 %146, %129
  %182 = add i32 %145, %33
  %183 = add i32 %182, %181
  %184 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %4, i32 %183, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %185 = extractvalue %dx.types.ResRet.f16 %184, 0
  br label %186

; <label>:186                                     ; preds = %180, %174
  %187 = phi half [ %185, %180 ], [ 0xH0000, %174 ]
  %188 = and i1 %177, %166
  br i1 %188, label %189, label %195

; <label>:189                                     ; preds = %186
  %190 = mul nsw i32 %146, %129
  %191 = add i32 %147, %33
  %192 = add i32 %191, %190
  %193 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %4, i32 %192, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %194 = extractvalue %dx.types.ResRet.f16 %193, 0
  br label %195

; <label>:195                                     ; preds = %189, %186
  %196 = phi half [ %194, %189 ], [ 0xH0000, %186 ]
  %197 = fmul fast half %163, %153
  %198 = fmul fast half %175, %151
  %199 = fmul fast half %187, %153
  %200 = fmul fast half %196, %151
  %201 = fadd fast half %200, %199
  %202 = fmul fast half %201, %149
  %203 = fadd fast half %198, %197
  %204 = fmul fast half %203, %152
  %205 = fadd fast half %204, %202
  br label %206

; <label>:206                                     ; preds = %195, %91
  %207 = phi half [ %205, %195 ], [ 0xH0000, %91 ]
  %208 = fmul fast half %207, %92
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %1, i32 %69, i32 0, half %208, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %209 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.i32 %209, 1
  %211 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.i32 %211, 1
  %213 = mul nsw i32 %212, %210
  %214 = extractvalue %dx.types.CBufRet.i32 %211, 2
  %215 = mul nsw i32 %213, %214
  %216 = add nsw i32 %215, %69
  %217 = add nuw nsw i32 %70, 1
  %218 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.i32 %218, 0
  %220 = icmp slt i32 %217, %219
  br i1 %220, label %68, label %221

; <label>:221                                     ; preds = %206
  br label %222

; <label>:222                                     ; preds = %221, %61
  %223 = phi i32 [ %62, %61 ], [ %216, %221 ]
  %224 = add nuw nsw i32 %63, 1
  %225 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.i32 %225, 3
  %227 = icmp slt i32 %224, %226
  br i1 %227, label %61, label %228

; <label>:228                                     ; preds = %222
  br label %229

; <label>:229                                     ; preds = %228, %10, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.f16(i32, %dx.types.Handle, i32, i32, half, half, half, half, i8, i32) #2

; Function Attrs: nounwind readnone
declare half @dx.op.unary.f16(i32, half) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !10, null}
!5 = !{!6, !7, !8, !9}
!6 = !{i32 0, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!7 = !{i32 1, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!8 = !{i32 2, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!9 = !{i32 3, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 3, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!10 = !{!11}
!11 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 68, null}
!12 = !{void ()* @deform_conv2d_im2cols, !"deform_conv2d_im2cols", null, !4, !13}
!13 = !{i32 0, i64 8388656, i32 4, !14}
!14 = !{i32 256, i32 1, i32 1}

#endif

const unsigned char g_deform_conv2d_im2cols[] = {
  0x44, 0x58, 0x42, 0x43, 0xba, 0x23, 0xa1, 0xdf, 0xf5, 0x34, 0x31, 0x9e,
  0xa2, 0xc2, 0x52, 0x99, 0x8f, 0x5f, 0xa4, 0xd6, 0x01, 0x00, 0x00, 0x00,
  0xe0, 0x0b, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x30, 0x01, 0x00, 0x00, 0x4c, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0xdc, 0x53, 0xce, 0x21, 0x8a, 0x8e, 0xde,
  0x34, 0xd8, 0x58, 0x0f, 0x22, 0x68, 0x1f, 0xbd, 0x44, 0x58, 0x49, 0x4c,
  0x8c, 0x0a, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0xa3, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x74, 0x0a, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x9a, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xa4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x37, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x93, 0x22, 0xa4, 0x84, 0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8a, 0x8c, 0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x78, 0x23, 0x00,
  0x25, 0x00, 0x14, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0x63, 0x0c, 0x22, 0xa3,
  0x00, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad,
  0xc4, 0xe4, 0x17, 0xb5, 0x8e, 0x0a, 0x63, 0x8c, 0x19, 0x73, 0x04, 0x08,
  0xa1, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86,
  0x85, 0x40, 0x41, 0x2a, 0xc7, 0x19, 0x6a, 0x0c, 0x34, 0x68, 0x95, 0x05,
  0x0c, 0x35, 0x86, 0x31, 0xc6, 0xa0, 0x41, 0xad, 0x0c, 0x66, 0x18, 0x7a,
  0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b,
  0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x62, 0x8c, 0x31, 0x0a, 0x11, 0x87, 0x1a,
  0x24, 0xe7, 0x08, 0x82, 0x62, 0xa8, 0x81, 0xc6, 0xa0, 0x54, 0x07, 0x02,
  0x66, 0xf2, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x64,
  0xe1, 0x16, 0x66, 0x81, 0x1e, 0xe4, 0xa1, 0x1e, 0xc6, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x81, 0x1c, 0x44, 0xa1, 0x1e, 0xcc, 0xc1, 0x1c, 0xca,
  0x41, 0x1e, 0xf8, 0x00, 0x1d, 0xc2, 0x81, 0x1d, 0xcc, 0xc1, 0x0f, 0x50,
  0x60, 0x08, 0x5f, 0xc2, 0x39, 0x8d, 0x34, 0x01, 0xcd, 0x24, 0xa1, 0x68,
  0x8c, 0x31, 0xc6, 0x18, 0x63, 0x8c, 0x31, 0xc6, 0x18, 0x63, 0x90, 0x9e,
  0x23, 0x00, 0x85, 0x29, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xae, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x78, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71,
  0x60, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a,
  0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x43, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x67, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x12, 0x10, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x2a, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x1a, 0x25, 0x50, 0x04, 0xc5,
  0x30, 0x02, 0x50, 0x18, 0x65, 0x50, 0x88, 0x01, 0x85, 0x50, 0x80, 0x04,
  0x44, 0x47, 0x00, 0x88, 0x17, 0x38, 0x20, 0x20, 0x02, 0xed, 0x19, 0x00,
  0xca, 0x33, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84, 0xe1, 0x98, 0x20, 0x0c,
  0xc8, 0x06, 0x61, 0x20, 0x26, 0x08, 0x43, 0xb2, 0x41, 0x18, 0x0c, 0x0a,
  0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0x83, 0x32, 0x41, 0xc8,
  0x26, 0x02, 0x13, 0x84, 0x61, 0x99, 0x20, 0x50, 0xd0, 0x86, 0x45, 0x59,
  0x18, 0x45, 0x19, 0x1a, 0xc7, 0x71, 0x8a, 0x0d, 0xcb, 0xb0, 0x30, 0xca,
  0x30, 0x34, 0x8e, 0xe3, 0x14, 0x1b, 0x16, 0x62, 0x61, 0x14, 0x62, 0x68,
  0x1c, 0xc7, 0x29, 0x26, 0x08, 0x03, 0xb3, 0x61, 0x91, 0x16, 0x46, 0x91,
  0x86, 0xc6, 0x71, 0x9c, 0x62, 0x03, 0xf1, 0x40, 0xd1, 0x34, 0x41, 0xd8,
  0xa4, 0x09, 0xc2, 0xd0, 0x6c, 0x40, 0x94, 0x8a, 0x51, 0x94, 0xc1, 0x02,
  0x36, 0x04, 0xd7, 0x06, 0x02, 0xa0, 0x30, 0x60, 0x82, 0x20, 0x00, 0xac,
  0xc8, 0xca, 0xcc, 0xde, 0xe4, 0xda, 0xbe, 0xc6, 0xde, 0xdc, 0xec, 0x64,
  0xc8, 0xbe, 0xd2, 0xda, 0x64, 0xc6, 0xde, 0xd8, 0xe6, 0x26, 0x08, 0x5c,
  0x34, 0x41, 0x18, 0x9c, 0x09, 0xc2, 0xf0, 0x6c, 0x18, 0xbc, 0x61, 0xd8,
  0x40, 0x28, 0x5c, 0xf7, 0x6d, 0x28, 0xb4, 0x0d, 0xc8, 0xc0, 0xa0, 0x0a,
  0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94, 0x20,
  0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36,
  0x25, 0x20, 0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9,
  0x4d, 0x09, 0x8c, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x02, 0xa4, 0x0c, 0x19, 0x9e,
  0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94, 0x00,
  0xab, 0x43, 0x86, 0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96,
  0xe6, 0x46, 0x37, 0x37, 0x25, 0x00, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc,
  0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4,
  0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x06, 0x50, 0x0d, 0x44, 0xe1, 0x44, 0xcc, 0x2f, 0x38, 0x4d, 0x65, 0x0f,
  0x3f, 0xc2, 0xd8, 0x82, 0xb3, 0x48, 0x56, 0xb0, 0x0d, 0x97, 0xef, 0x3c,
  0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00,
  0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x06, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b,
  0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x98, 0xc0, 0x35, 0x5c,
  0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00,
  0x83, 0x5f, 0xd4, 0xba, 0x0d, 0x60, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x01,
  0xd6, 0x46, 0x15, 0x05, 0x11, 0xb1, 0x93, 0x13, 0x11, 0x7e, 0x51, 0xeb,
  0x16, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04, 0x30, 0x88,
  0x83, 0x8f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35,
  0x40, 0x84, 0xf9, 0x45, 0xad, 0x03, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x2e, 0x01, 0x00, 0x00, 0x13, 0x04, 0x56, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x34, 0xca, 0xae, 0x2c, 0x05, 0x4a, 0xae, 0x06,
  0xca, 0xa6, 0x74, 0x03, 0x0a, 0x53, 0x80, 0x50, 0x11, 0x94, 0x00, 0x99,
  0x19, 0x80, 0x31, 0x02, 0x10, 0x7c, 0x83, 0x31, 0x02, 0x10, 0x7c, 0x46,
  0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x6d,
  0x4b, 0x51, 0x55, 0xd1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x54, 0x1c,
  0x63, 0x68, 0x9a, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x55, 0xd7,
  0x1c, 0x1c, 0x37, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0xe5, 0x39,
  0x88, 0xa6, 0x51, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x7d, 0x8f,
  0xb2, 0x6d, 0xd5, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x65, 0xd0,
  0x70, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x20, 0x89, 0xc1, 0x24, 0x74,
  0xa3, 0x09, 0x01, 0x30, 0xdc, 0x30, 0x04, 0x68, 0x30, 0xcb, 0x10, 0x54,
  0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x48, 0x65, 0x60, 0x15, 0x63,
  0x30, 0x9a, 0x10, 0x08, 0x65, 0x04, 0x56, 0x87, 0x40, 0xa3, 0x09, 0x44,
  0x50, 0x42, 0x60, 0x26, 0x14, 0x22, 0xa8, 0x25, 0xa0, 0xd1, 0x84, 0x25,
  0x28, 0x21, 0x30, 0x23, 0x04, 0x11, 0xd4, 0x13, 0xd0, 0x68, 0xc2, 0x23,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x24, 0x07, 0x63, 0x20, 0xad,
  0xc1, 0x68, 0x42, 0x30, 0xd4, 0x10, 0x50, 0x15, 0x01, 0x8d, 0x26, 0x50,
  0xc3, 0x68, 0x82, 0x04, 0xd4, 0xa1, 0x48, 0x25, 0x01, 0x14, 0x11, 0x48,
  0x05, 0x84, 0x58, 0xe2, 0x88, 0xc0, 0x02, 0x04, 0x04, 0xa3, 0x09, 0xd9,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd2, 0x1f, 0xc0, 0xc1, 0xc7,
  0x07, 0xa3, 0x09, 0x01, 0x50, 0xc3, 0x1f, 0x5c, 0x05, 0x85, 0x54, 0x30,
  0x48, 0x05, 0x9b, 0x54, 0xf0, 0x89, 0x25, 0x88, 0x08, 0x2c, 0x38, 0x44,
  0x60, 0xc1, 0x27, 0x02, 0x0b, 0xc6, 0x40, 0x04, 0xc3, 0x0d, 0x4c, 0x29,
  0x98, 0xc1, 0x2c, 0x83, 0x50, 0x05, 0xd5, 0x6c, 0x52, 0x01, 0x23, 0x15,
  0x80, 0x81, 0x54, 0x50, 0x06, 0x52, 0x41, 0x1a, 0x48, 0x05, 0x69, 0x00,
  0x85, 0x06, 0x63, 0x20, 0x15, 0xb0, 0x81, 0xd4, 0x10, 0x80, 0xb9, 0x81,
  0x1a, 0x88, 0xa0, 0x84, 0x00, 0x66, 0x09, 0x86, 0x81, 0x8a, 0x61, 0x4c,
  0x26, 0x41, 0x18, 0xa8, 0x18, 0xc6, 0x64, 0x22, 0x0b, 0x61, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x24, 0x5c, 0x48, 0x05, 0x3c, 0xa8, 0x85, 0xd1,
  0x84, 0x00, 0x18, 0x6e, 0x08, 0x6a, 0xc1, 0x0c, 0x66, 0x19, 0x88, 0x29,
  0x98, 0x25, 0x28, 0x06, 0x2a, 0x86, 0x17, 0x89, 0x14, 0x62, 0xa0, 0x62,
  0x78, 0x91, 0xc8, 0x2d, 0x88, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x90,
  0x7a, 0xc1, 0x15, 0xfa, 0x40, 0x17, 0x46, 0x13, 0x02, 0xc0, 0x02, 0x44,
  0x04, 0x16, 0x10, 0x20, 0xb0, 0xe0, 0x17, 0x4e, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x92, 0x38, 0xcc, 0x82, 0x28, 0xe4, 0xc2, 0x68, 0x42,
  0x00, 0x0c, 0x37, 0x04, 0xbf, 0x00, 0x06, 0xb3, 0x0c, 0x87, 0x11, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x54, 0x0e, 0xb6, 0x50, 0x0a, 0xe3,
  0x30, 0x9a, 0x10, 0x04, 0xa3, 0x09, 0x82, 0x50, 0x02, 0x22, 0x15, 0x08,
  0x62, 0x03, 0x28, 0x88, 0xa0, 0xc4, 0x80, 0x14, 0xa0, 0x02, 0x01, 0x2a,
  0x20, 0x60, 0xc4, 0x40, 0x01, 0x40, 0x10, 0x0c, 0x96, 0x78, 0xf0, 0x85,
  0x58, 0x08, 0xd2, 0xe1, 0x16, 0xd6, 0x61, 0x34, 0x21, 0x00, 0x66, 0x09,
  0x8e, 0x81, 0x0a, 0x43, 0x30, 0xd8, 0xa2, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x29, 0x1e, 0xc4, 0x21, 0x16, 0xde, 0x61, 0x34, 0x21, 0x08,
  0x46, 0x13, 0x04, 0xa1, 0x84, 0x49, 0x2a, 0x10, 0xc4, 0x06, 0x56, 0x10,
  0x41, 0xc9, 0x01, 0x2c, 0x40, 0x05, 0x02, 0x54, 0x40, 0xc0, 0x88, 0x81,
  0x02, 0x80, 0x20, 0x18, 0x2c, 0xfd, 0xa0, 0x0e, 0xbc, 0x10, 0xd4, 0xc3,
  0x38, 0xdc, 0xc3, 0x68, 0x42, 0x00, 0xd4, 0xa6, 0x0f, 0x5b, 0x4b, 0x20,
  0x15, 0x2c, 0x52, 0x47, 0x00, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0xb0,
  0x8c, 0x04, 0x3c, 0x88, 0x43, 0xb0, 0x0f, 0xe9, 0xd0, 0x0f, 0xa3, 0x09,
  0x01, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x92, 0x48, 0xcc, 0x83,
  0x38, 0xec, 0xc3, 0x68, 0x42, 0x10, 0x58, 0xa0, 0x0b, 0x22, 0x18, 0x4d,
  0x40, 0x83, 0xa0, 0x84, 0x20, 0x46, 0x13, 0xd4, 0x60, 0xb0, 0x20, 0x0e,
  0x44, 0x60, 0x43, 0x00, 0x82, 0x0b, 0x8c, 0x59, 0x00, 0xc1, 0x67, 0x34,
  0x41, 0x11, 0x2c, 0x30, 0x07, 0x11, 0x8c, 0x26, 0xc4, 0x81, 0x50, 0x42,
  0x10, 0xa3, 0x09, 0x0e, 0x60, 0x41, 0x1d, 0x88, 0xc0, 0x86, 0x00, 0x04,
  0x17, 0x18, 0xb3, 0x60, 0x82, 0xcf, 0x68, 0x02, 0x19, 0x00, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x20, 0xd9, 0xc4, 0x49, 0xd8, 0x43, 0x4c, 0x8c,
  0x26, 0x04, 0xc3, 0x70, 0x44, 0xf3, 0x0f, 0xc5, 0x77, 0x82, 0xb1, 0xe1,
  0x88, 0xe0, 0x29, 0xbe, 0x1a, 0x82, 0x1d, 0x8e, 0x40, 0x46, 0xa2, 0xf8,
  0x4a, 0x08, 0xf6, 0x12, 0x63, 0xc3, 0x11, 0xc1, 0x52, 0x7c, 0x15, 0x0c,
  0x3b, 0xcb, 0x10, 0x21, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x3c,
  0x62, 0xe1, 0x12, 0xd6, 0x05, 0x83, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0xe0, 0x21, 0x0b, 0x98, 0x78, 0x2e, 0x18, 0x64, 0xc3, 0x58, 0x80, 0xc0,
  0x04, 0xb2, 0x00, 0xc1, 0x15, 0xc6, 0xac, 0x0b, 0xe2, 0x73, 0x85, 0x31,
  0xb3, 0x82, 0xf8, 0x58, 0x4c, 0x0c, 0xf1, 0x31, 0x99, 0x10, 0xe2, 0x53,
  0xc9, 0xb2, 0xc3, 0x0d, 0x01, 0x4f, 0x98, 0xc1, 0x2c, 0x43, 0xa2, 0x04,
  0xd6, 0x68, 0x22, 0x28, 0xa6, 0x1e, 0xa0, 0x02, 0x01, 0x46, 0x0c, 0x14,
  0x00, 0x04, 0xc1, 0x60, 0xa9, 0x0b, 0xb1, 0x98, 0x89, 0xa0, 0x2d, 0x76,
  0xe2, 0x2d, 0x46, 0x13, 0x02, 0x60, 0x96, 0x40, 0x19, 0xa8, 0x30, 0x84,
  0x44, 0x4e, 0x90, 0xe1, 0x86, 0x69, 0x2c, 0xcc, 0xc0, 0xc2, 0x80, 0x2c,
  0x40, 0x30, 0xdc, 0x30, 0x05, 0x68, 0x50, 0x43, 0xa0, 0xb3, 0x0c, 0x0b,
  0x13, 0xd8, 0x45, 0x06, 0x22, 0xa8, 0xe0, 0x1f, 0xa0, 0x82, 0x0a, 0x46,
  0x0c, 0x14, 0x00, 0x04, 0xc1, 0x60, 0xf9, 0x0b, 0xb6, 0xe8, 0x89, 0xe0,
  0x2e, 0xca, 0x22, 0x2f, 0x46, 0x13, 0x02, 0x60, 0x96, 0x80, 0x19, 0xa8,
  0x30, 0x84, 0xc5, 0x54, 0x14, 0x43, 0x83, 0xb6, 0x00, 0xc1, 0x70, 0x83,
  0x17, 0xa0, 0xc1, 0x70, 0x43, 0xf7, 0x16, 0x66, 0x50, 0x42, 0xa0, 0xb3,
  0x0c, 0x8d, 0x13, 0x98, 0xe7, 0x06, 0x22, 0x28, 0x30, 0x48, 0x09, 0xa8,
  0x40, 0x80, 0x11, 0x03, 0x05, 0x00, 0x41, 0x30, 0x58, 0x52, 0xc3, 0x2e,
  0xce, 0x22, 0x08, 0x8d, 0xb7, 0x18, 0x8d, 0xd1, 0x84, 0x00, 0x98, 0x25,
  0x70, 0x06, 0x2a, 0x0c, 0xa1, 0xd1, 0x15, 0xa6, 0x12, 0x49, 0x67, 0x19,
  0x1e, 0x28, 0xb0, 0x32, 0xa8, 0x03, 0x11, 0x54, 0x19, 0xc0, 0x04, 0x54,
  0x20, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0x2c, 0xb0, 0xd1, 0x17,
  0x6e, 0x11, 0xa0, 0x86, 0x5d, 0xa8, 0xc6, 0x68, 0x42, 0x00, 0xcc, 0x12,
  0x40, 0x03, 0x15, 0x86, 0xf0, 0xa0, 0x8b, 0x63, 0x1c, 0x19, 0xc8, 0xc7,
  0xa6, 0x33, 0x90, 0x8f, 0x29, 0x66, 0x20, 0x1f, 0x23, 0xd2, 0x40, 0x3e,
  0x16, 0x08, 0xf0, 0xb1, 0xa0, 0x0d, 0xe4, 0x63, 0x85, 0x01, 0x1f, 0x0b,
  0xd8, 0x40, 0x3e, 0x16, 0x0c, 0xf0, 0x99, 0x25, 0x88, 0x06, 0x2a, 0x0c,
  0x01, 0xe2, 0x97, 0xc3, 0x02, 0x75, 0x90, 0xcf, 0x88, 0x81, 0x03, 0x80,
  0x20, 0x18, 0x34, 0xbd, 0x61, 0x1a, 0x7f, 0x01, 0x12, 0xb6, 0x11, 0x8c,
  0xc6, 0x68, 0x8c, 0x06, 0x69, 0xe0, 0xc6, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x48, 0xbb, 0xc1, 0x1a, 0x7b, 0x61, 0x1b, 0xa3, 0x09, 0x41, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x52, 0x6f, 0xb8, 0x46, 0x5f, 0xec,
  0xc6, 0x68, 0x42, 0x10, 0x58, 0x30, 0x88, 0x60, 0x34, 0x61, 0x10, 0x4c,
  0x08, 0x44, 0x60, 0xc1, 0x49, 0x80, 0xc0, 0x4e, 0x22, 0x3c, 0x60, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x12, 0x79, 0xd4, 0x06, 0x69, 0x84,
  0xc7, 0x68, 0x42, 0x00, 0x0c, 0x37, 0x0c, 0x01, 0x1a, 0xcc, 0x32, 0x14,
  0x52, 0x30, 0x4b, 0x30, 0x0d, 0x54, 0x0c, 0x62, 0x32, 0x28, 0x92, 0xc5,
  0x84, 0x79, 0xc0, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa4, 0xf4,
  0xd0, 0x8d, 0xd4, 0x38, 0x8f, 0xd1, 0x84, 0x60, 0x18, 0x6e, 0x18, 0x02,
  0x34, 0x98, 0x65, 0x18, 0xa8, 0x60, 0x96, 0xa0, 0x42, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
